WEBVTT

00:00:00.000 --> 00:00:04.020
哈囉!!大家好~歡迎來到JavaScript程式設計新手村

00:00:04.040 --> 00:00:08.980
我是凱迪，在單元30的部分，我們將介紹NodeJS

00:00:08.980 --> 00:00:13.180
還有這個Express，這個Web的一個框架

00:00:13.180 --> 00:00:15.280
還有MongoDB的一個新手入門

00:00:15.280 --> 00:00:20.840
那帶領大家完成一個用JavaScript開發的後端應用程式

00:00:24.000 --> 00:00:26.080
這是我們單元的一個大綱

00:00:26.280 --> 00:00:30.640
首先會介紹一下我們NodeJS這個開發的一個環境

00:00:30.640 --> 00:00:35.960
那接著介紹資料庫和MongoDB的一些基本概念

00:00:35.960 --> 00:00:40.240
再來就是Express這個Web的一個框架

00:00:40.240 --> 00:00:46.040
最後，我們會帶領大家完成一個簡單的在JavaScript

00:00:46.040 --> 00:00:51.000
在Node開發的一個Todo APP

00:00:53.000 --> 00:00:54.740
首先來介紹NodeJS

00:00:55.780 --> 00:00:59.920
雖然實際上我們在上一個單元，我們就已經有介紹NodeJS

00:00:59.980 --> 00:01:02.860
來開發網路爬蟲的部分

00:01:02.860 --> 00:01:05.340
所以大家對於NodeJS應該不陌生

00:01:05.340 --> 00:01:10.500
那在之前的一些單元，我們實際上也用到NodeJS的一個

00:01:10.520 --> 00:01:16.000
很方便的一個管理套件的工具叫npm node-module-manager

00:01:16.000 --> 00:01:22.520
那再跟大家回顧一下我們NodeJS重要的一個觀念

00:01:22.520 --> 00:01:27.500
首先，它是一個OpenSource也是一個跨平台的一個

00:01:27.500 --> 00:01:31.880
可以用於伺服器或網路應用程式的執行環境

00:01:31.880 --> 00:01:37.620
也是說透過NodeJS，事實上把JavaScript從原本的數組語言

00:01:37.620 --> 00:01:41.740
數組的一個環境，Browser可以解放出來了

00:01:41.740 --> 00:01:45.620
讓JavaScript它的能量可以更加地釋放

00:01:45.620 --> 00:01:50.920
在不同的地方，不管是伺服器端、嵌入式系統......等地方

00:01:50.920 --> 00:01:58.700
那另外一個重點是 - NodeJS它是在Google V8引擎去執行代碼的

00:01:58.700 --> 00:02:05.300
這就是讓它不用再寄託於Browser一個蠻重要的一個環節

00:02:05.300 --> 00:02:09.680
那另外一個就是NodeJS有內建非常多的一個生態系

00:02:09.680 --> 00:02:14.980
事實上你用npm去查找，可以找到非常多的一個套件

00:02:14.980 --> 00:02:17.560
或一些相關的一些程式碼

00:02:17.560 --> 00:02:22.040
透過內建的模組，事實上它可以做為獨立的伺服器

00:02:22.100 --> 00:02:29.980
就不用運用什麼像Apache或者是Angi等等之類的一些伺服器

00:02:33.660 --> 00:02:36.520
接著我們來了解一下資料庫

00:02:36.520 --> 00:02:39.000
資料庫也叫做DataBase

00:02:39.000 --> 00:02:42.800
DataBase它最重要的功用是在於說

00:02:42.800 --> 00:02:48.880
它希望能夠把一些資料儲存起來，未來能夠方便使用

00:02:48.880 --> 00:02:50.880
這甚麼意思呢?

00:02:50.880 --> 00:02:54.640
在我們撰寫程式的時候，我們常會宣告一些變數

00:02:54.640 --> 00:02:56.960
或者常數之類的

00:02:56.960 --> 00:02:59.540
事實上這些變數、常數之類的東西

00:02:59.560 --> 00:03:04.020
事實上就是我們在存取資料的一種，儲存的一種方式

00:03:04.020 --> 00:03:08.880
但是比較可惜的是，就是這種變數事實上都儲存在記憶體當中

00:03:08.880 --> 00:03:11.160
也就是說，它就有揮發性

00:03:11.160 --> 00:03:14.420
就是當你，如果說你的程式結束了之後

00:03:14.420 --> 00:03:19.720
事實上你這一個變數所儲存的資料就會消失掉

00:03:19.720 --> 00:03:24.980
但有些時候，我們是希望我們的資料可以儲存在某些特定的地方

00:03:24.980 --> 00:03:30.480
未來我們可以去查詢或進一步的分析、加值服務

00:03:30.480 --> 00:03:38.760
也就是一般來講的話，我們在這種長久性的儲存資料通常會有兩種方式

00:03:38.760 --> 00:03:42.260
一種是檔案系統、一種是資料庫

00:03:43.100 --> 00:03:50.660
檔案系統的好處是 - 它簡便方便使用，容易寫入檔案

00:03:50.660 --> 00:03:56.380
但是它的缺點就是常常會有redundant，就是重複的一些資料

00:03:56.380 --> 00:04:00.020
或是說不方便的去查詢或管理

00:04:00.020 --> 00:04:03.660
資料庫的好處是說它雖然相對複雜

00:04:03.660 --> 00:04:07.900
可是它可以方便地去新增、擷取、更新

00:04:07.900 --> 00:04:11.780
跟未來的一些刪除的，一些動作

00:04:11.780 --> 00:04:18.560
那同樣的是，它可以去建立更複雜的一些操作

00:04:18.560 --> 00:04:22.820
也可以避免說你的資料有重複的儲存

00:04:22.820 --> 00:04:27.680
OK~所以說我們這邊來看說資料庫事實上就是指

00:04:27.680 --> 00:04:29.780
他以一定的方式儲存在一起

00:04:29.780 --> 00:04:33.040
然後可以給多個使用者去共享

00:04:33.040 --> 00:04:38.160
然後盡可能的減少redundant 的一些資料

00:04:38.160 --> 00:04:44.020
這樣一個儲存資料的一個集合，我們就叫做資料庫

00:04:44.020 --> 00:04:48.040
目前主流的話有分為關聯式資料庫

00:04:48.040 --> 00:04:51.600
也就是所謂的Relational DataBase(RDB)

00:04:51.600 --> 00:04:54.800
另外一種是NoSQL

00:04:54.800 --> 00:04:57.440
那有一種說法就是Not Only SQL

00:04:57.440 --> 00:05:00.840
事實上在這個業界的開發裡面

00:05:00.840 --> 00:05:04.840
我們事實上兩種的一個資料庫，通常都蠻常見的

00:05:04.840 --> 00:05:10.380
那主要的兩種差別是在於說，你的使用需求是甚麼?

00:05:10.380 --> 00:05:17.380
如果說你是一般的一些網站開發，然後是企業級的一些應用的話

00:05:17.380 --> 00:05:23.920
你可能的話，很多都是希望使用RDB去做一些

00:05:23.920 --> 00:05:28.800
比較roblox的一些維護，那像一些

00:05:28.800 --> 00:05:33.780
如果你是需要一些social的Data，你可能就是

00:05:33.780 --> 00:05:39.340
每一秒鐘有非常多的，按讚的一些數量的資料產生

00:05:39.340 --> 00:05:42.760
或者是說每一秒有非常多的twitter

00:05:42.760 --> 00:05:50.000
或者甚至是你IOT的solution有非常多的資料，每秒在做一些傳輸

00:05:50.000 --> 00:05:54.000
那這時候你用NoSQL就是相對比較好的選擇

00:05:54.000 --> 00:05:58.460
所以說沒有說哪一個是絕對最好的一個solution

00:05:58.460 --> 00:06:02.920
就是針對你使用的情境scenario，去選擇合適的工具

00:06:02.920 --> 00:06:04.900
這個跟程式語言是一樣的道理

00:06:04.900 --> 00:06:09.340
沒有最好的程式語言，只有最合適的地方去使用

00:06:09.340 --> 00:06:13.860
那同樣的這個RDB這部分的話

00:06:13.860 --> 00:06:18.980
它蠻重要一點就是說，它可以用SQL的一種查詢方法

00:06:18.980 --> 00:06:22.520
去做查詢或者是修改

00:06:22.520 --> 00:06:27.840
那這個SQL語言的話，我們待會會稍微帶到一下，不會講太多

00:06:27.840 --> 00:06:32.900
因為待會我們事實上是用MangoDB，也就是NoSQL的部分

00:06:32.900 --> 00:06:38.960
那這個SQL的話，這個Relational database(RDB)關聯式資料庫

00:06:38.960 --> 00:06:45.180
它的一個reaction table，也就是說事實上它的資料是一列一列去儲存的

00:06:45.180 --> 00:06:54.220
那它列一個資料表table，組成了一個好多的資料表組成一個資料庫

00:06:54.220 --> 00:06:59.320
那這一些資料表也有可能就是透過彼此的關聯去做連結的

00:06:59.320 --> 00:07:02.500
那NoSQL就不太一樣了，它是Key-Value

00:07:02.500 --> 00:07:06.300
通常的話會是Key-Value，去做儲存的

00:07:06.300 --> 00:07:11.240
那它是類似一個文件式的一個儲存方式

00:07:14.000 --> 00:07:17.360
那關聯式資料庫我們剛講了，它是一種

00:07:17.360 --> 00:07:21.260
一堆資料表table所組成的DataBase table

00:07:21.260 --> 00:07:26.660
那每個資料表，事實上會對應一個固定資料表的schema的結構

00:07:26.660 --> 00:07:31.580
也就是說你可能有，如果說你是一個資料表是users

00:07:31.580 --> 00:07:34.420
就是儲存使用者資料，你可能有user name

00:07:34.420 --> 00:07:41.760
user name可能是存字串，那可能還有user的生日

00:07:41.760 --> 00:07:45.860
那可能就是存Date，就是說存日期的一個資料

00:07:45.860 --> 00:07:49.360
那這一些的話，就是它存的一個schema

00:07:49.360 --> 00:07:53.100
就是說這一個資料表的結構會長甚麼樣子

00:07:53.100 --> 00:07:56.440
那一般會從SQL去做一些查詢

00:07:56.440 --> 00:08:01.220
那事實上主流有非常多的一個關聯式資料庫

00:08:01.220 --> 00:08:06.260
就是在做這一些應用包括PostgreSQL、MySQL或者是Oracle

00:08:06.260 --> 00:08:12.000
甚至是輕量級的SQLite還有Microsoft SQL Server...等等

00:08:12.000 --> 00:08:18.220
那我們這邊的話，事實上可以看到網路上有一個蠻好的學習資源

00:08:18.220 --> 00:08:20.420
SQL的一個語法教學

00:08:20.420 --> 00:08:25.520
如果你對於SQL有興趣的話，事實上可以看看這邊SQL語法教學

00:08:25.520 --> 00:08:28.380
我們可以看到就是說SQL語法，大慨就會長這樣

00:08:28.380 --> 00:08:32.660
也就是說你SELECT "欄位名" FROM "tableName" 這樣子

00:08:32.660 --> 00:08:38.100
就可以選擇說你要從這個table，去取得你想要的資料

00:08:41.320 --> 00:08:44.840
那接下來是NoSQL，NoSQL的話

00:08:45.180 --> 00:08:48.500
它有一種說法是叫做Not Only SQL

00:08:48.660 --> 00:08:53.260
那它就是為了讓它更容易去處理一些

00:08:54.660 --> 00:08:59.020
需要就是短時間去處理的一些資料

00:08:59.260 --> 00:09:03.360
那它主要的話，是以Key-Value的方式去做儲存的

00:09:03.660 --> 00:09:05.420
那它的延展性相對比較高

00:09:05.660 --> 00:09:10.460
那我們可以看到這邊有非常多的一些NoSQL使用的一些

00:09:11.180 --> 00:09:15.100
資料庫像CouchDB、Redis、Cassandra、mangoDB

00:09:15.280 --> 00:09:18.420
那mangoDB的話就是我們接下來會去介紹的一個

00:09:19.160 --> 00:09:22.480
NoSQL的蠻重要的一個資料庫

00:09:23.660 --> 00:09:29.120
那我們這邊也有一個，相關的一篇有關資料庫文章的介紹

00:09:29.120 --> 00:09:31.480
那大家可以再去參考一下

00:09:33.840 --> 00:09:37.860
由於就是資料庫這一個議題

00:09:38.260 --> 00:09:41.600
事實上可以開一整門、一學期的課來探討

00:09:41.600 --> 00:09:44.120
那我們這邊就大致上介紹一些觀念

00:09:44.860 --> 00:09:47.960
那主要還是以實務的範例來為大家介紹

00:09:49.840 --> 00:09:53.840
OK~接下來我們來介紹一下MongoDB的部分

00:09:53.840 --> 00:09:58.140
那MongoDB是一種文件導向的資料庫管理系統

00:09:58.600 --> 00:10:02.400
那它事實上是屬於NoSQL類的資料庫

00:10:02.900 --> 00:10:09.640
那如果說還沒有安裝過的學員，事實上可以到它的官方網站

00:10:09.640 --> 00:10:12.660
這邊有相關的一些資訊

00:10:13.940 --> 00:10:17.820
我們這邊的話事實上就是用Conmmunity的

00:10:18.420 --> 00:10:20.100
社群的版本就可以了

00:10:20.360 --> 00:10:21.900
選擇你的作業系統

00:10:21.900 --> 00:10:27.780
像如果說我是Mac OS，我選一下我的版本

00:10:27.780 --> 00:10:30.700
那就下載下來之後，照著步驟去安裝這樣子

00:10:31.180 --> 00:10:35.000
那如果說你是Windows的話，就點選這邊

00:10:35.000 --> 00:10:35.600
Linux

00:10:36.520 --> 00:10:41.120
那當然也可以用指令碼啦!用yum或者是說用Homebrew

00:10:41.560 --> 00:10:42.660
這樣的方式去安裝

00:10:43.180 --> 00:10:43.560
OK~

00:10:46.720 --> 00:10:51.100
如果說你是Windows的一些學員，你這邊事實上的一個

00:10:51.800 --> 00:10:55.920
教你怎麼安裝MongoDB在Windows上面一個文章

00:10:55.920 --> 00:10:57.900
事實上你可以按照著步驟走

00:10:58.460 --> 00:11:01.220
就可以去完成安裝了

00:11:01.460 --> 00:11:04.020
那最後的畫面應該是大致上是這樣子

00:11:05.300 --> 00:11:07.800
完成Finish

00:11:09.440 --> 00:11:16.240
比較建議的是說，因為你需要去執行MangoDB這個.exe檔案

00:11:16.240 --> 00:11:19.300
所以盡量放在你可以去執行到的一個位子

00:11:19.980 --> 00:11:23.000
OK~那啟動畫面的話，大慨就會是長這個樣子

00:11:24.820 --> 00:11:28.080
那如果說你是用Mac的話

00:11:28.580 --> 00:11:32.200
啟動畫面大慨就是長這個樣子，你就會在終端機這邊打mongod

00:11:32.980 --> 00:11:35.800
這個指令，那它就啟動MongoDB

00:11:36.000 --> 00:11:38.480
那它Port是27017

00:11:38.880 --> 00:11:42.460
還有要注意的是說，如果說你發現說

00:11:43.180 --> 00:11:45.740
你把我們的範例程式下載下來

00:11:45.740 --> 00:11:50.140
但是發現說fail to connect，你下npm start這個指令

00:11:50.280 --> 00:11:54.920
那是反應是說fail to connect to server

00:11:55.140 --> 00:11:59.560
那這樣的話就變成說，你事實上那個MangoDB沒有開起來

00:11:59.560 --> 00:12:03.700
那記得去開一個新的temp，terminal的temp

00:12:04.160 --> 00:12:05.880
那打mongod

00:12:06.380 --> 00:12:08.060
這樣就可以啟動起來了。OK~

00:12:08.820 --> 00:12:14.760
所以要注意說，如果你下載我們JavaScript101的CH16

00:12:14.760 --> 00:12:16.660
example下來然後npm start

00:12:17.780 --> 00:12:20.480
如果說有遇到問題的話，你可能就是要注意說是

00:12:20.740 --> 00:12:25.240
如果port 27017的問題，那可能是你的MangoDB沒有起來

00:12:25.420 --> 00:12:29.080
那記得是說，在應用程式運行的過程中

00:12:29.080 --> 00:12:32.600
mongod實際上要持續起來

00:12:36.660 --> 00:12:40.840
接著，我們這邊來看一下

00:12:41.860 --> 00:12:45.080
我們事實上會用到一個套件叫mongoose

00:12:45.080 --> 00:12:47.380
mongoose是NodeJS的一個套件

00:12:47.540 --> 00:12:53.020
它事實上是可以幫你把MongoDB的一些API去包裹起來

00:12:53.480 --> 00:12:58.340
讓你可以更輕易去操作這個MongoDB的資料庫

00:12:58.640 --> 00:13:03.060
像是物件導向式的方式去操作

00:13:03.380 --> 00:13:06.300
我們等下會去有一些操作

00:13:08.240 --> 00:13:12.120
ORM的方式，我們等下會跟大家介紹到底是怎麼樣的

00:13:12.560 --> 00:13:16.300
事實上就是說NoSQL，之前有提到說它是

00:13:16.780 --> 00:13:21.980
通常是沒有schema，就是說不像Relational DataBase

00:13:21.980 --> 00:13:27.500
它是有資料表的方式，就是說像users

00:13:27.920 --> 00:13:34.600
可能會有username

00:13:36.860 --> 00:13:41.340
String之類的一個type去對應它的schema

00:13:41.580 --> 00:13:46.880
這邊的話，我們比較有趣的是說

00:13:47.300 --> 00:13:51.640
它有用一個模擬的方式去模擬schema的based

00:13:51.980 --> 00:13:56.040
主要是方便使用，等一下我們會來更進一步的介紹

00:13:56.340 --> 00:13:59.740
OK~再進一步地介紹之前，我們再來介紹Express

00:14:00.200 --> 00:14:03.520
Express是NodeJS裡面一個輕量級的Web框架

00:14:03.720 --> 00:14:08.400
要注意的是說NodeJS本身不是一個框架，它是一個運行的環境

00:14:08.940 --> 00:14:10.800
或者是一個平台

00:14:11.020 --> 00:14:15.160
Express它是一個非常輕量的一個Web FrameWork

00:14:15.840 --> 00:14:22.680
它的特色就是說它很輕量，所以它在開發API Server是非常方便

00:14:23.880 --> 00:14:28.160
然後要注意的，它事實上不是說完整的一個

00:14:28.160 --> 00:14:32.400
就是切分的MVC的一個框架

00:14:33.820 --> 00:14:37.980
但是你可以自己設計，事實上它就是一個比較鬆散的一個框架

00:14:37.980 --> 00:14:42.600
你可以自己去設計，通常我們一個網頁視覺的部分

00:14:43.000 --> 00:14:48.100
要呈現給User的部分，通常就是View跟template的部分

00:14:49.180 --> 00:14:55.140
這部分會去呈現出來，也就是透過資料庫的一個讀取

00:14:55.140 --> 00:14:59.980
把資料塞進去template中，去呈現出來給使用者

00:15:00.280 --> 00:15:03.140
Model的話，主要就是資料庫互動的部分

00:15:03.480 --> 00:15:05.300
這個我們等下會介紹

00:15:05.300 --> 00:15:10.020
Controller主要是商業邏輯跟業務邏輯的部分

00:15:10.020 --> 00:15:18.320
也包含就是當一個網址進來的時候，要去對應哪一個操作系統

00:15:19.320 --> 00:15:22.300
去做處理這樣子

00:15:22.600 --> 00:15:25.820
一般來講，我們這個MongoDB、Express、Angular、Node

00:15:25.820 --> 00:15:28.780
可能會有些同學有聽過叫做MEAN的一個架構

00:15:28.780 --> 00:15:31.760
事實上就是指的是MongoDB、Express、Angular跟Node

00:15:31.760 --> 00:15:35.800
我們這邊主要就是介紹MongoDB、Express跟NodeJS的部分

00:15:36.540 --> 00:15:41.200
OK~接下來我們會有個實務的範例來跟大家介紹

00:15:41.620 --> 00:15:45.920
它主要是一個TodoApp，它包含了CRUD

00:15:45.920 --> 00:15:47.380
CRUD是甚麼意思呢?

00:15:47.380 --> 00:15:51.160
就是Create-創造，就是我會創造一個代辦事項

00:15:51.160 --> 00:15:55.420
Read就是讀取代辦事項，Update就是更新修改

00:15:56.200 --> 00:15:57.840
D的話，就是Delete-刪除

00:15:58.200 --> 00:16:02.060
那也就是說，事實上這個已經麻雀雖小五臟俱全

00:16:02.060 --> 00:16:08.680
就包含所有的一個基本web application會應用到的一些操作

00:16:08.680 --> 00:16:15.440
包括新增、讀取、修改跟刪除，新增修查這些東西

00:16:15.440 --> 00:16:17.440
大慨畫面是長這樣子

00:16:17.440 --> 00:16:19.940
接下來，我們來介紹我們使用的工具

00:16:20.480 --> 00:16:25.000
我們首先會使用到的是Excpress這個Web的Framework

00:16:25.460 --> 00:16:29.740
還有使用到MogonDB這個資料庫以及mongoose這一個

00:16:30.340 --> 00:16:33.580
界接MogoDB的一個工具

00:16:37.100 --> 00:16:41.220
這邊MongoDB的使用方式，我們在之前已經介紹過了

00:16:41.700 --> 00:16:46.600
如果說你是使用linux幫助的同學的話

00:16:46.840 --> 00:16:51.800
你事實上MongoDB開機後，你已經安裝好的話就會自動開啟

00:16:51.800 --> 00:16:57.460
如果說你是Mac使用者記得在終端機打mongod

00:16:57.620 --> 00:16:59.280
但是不能關掉要注意一下

00:16:59.640 --> 00:17:07.700
如果你是Windows的同學，記得要點開MongoDB.exe的檔案讓它執行

00:17:08.260 --> 00:17:13.600
我們這邊事實上要先安裝兩個套件的工具

00:17:13.600 --> 00:17:16.400
一個是叫express-generator

00:17:16.400 --> 00:17:18.840
一個叫nodemon

00:17:19.180 --> 00:17:20.720
那這兩個是幹嘛的?

00:17:20.720 --> 00:17:24.400
一個是Express的產生器就是框架產生器

00:17:24.400 --> 00:17:30.560
它快速幫你產生一個類似鷹架，我們蓋房子不是有鷹架嗎

00:17:30.560 --> 00:17:34.600
它就是先把你一個Web的骨架先蓋好，那你再把一些

00:17:34.920 --> 00:17:38.920
你想要的元素再把它填進去，這樣會比較方便使用

00:17:38.920 --> 00:17:42.700
我們教學方便就使用express-generator這樣子

00:17:42.960 --> 00:17:45.380
那nodemon是甚麼意思呢?

00:17:45.380 --> 00:17:49.640
就是說當你在修改JavaScript程式的時候

00:17:50.040 --> 00:17:55.120
事實上你通常在NodeJS這部分，你可能就是要

00:17:55.340 --> 00:18:00.840
重新把伺服器關掉然後重啟的那種感覺

00:18:00.840 --> 00:18:06.540
但是在這邊的話用nodemon，它會自動擬偵測你的

00:18:06.540 --> 00:18:12.280
Scrpit假設有更動的話，它就會自動幫你reload，是相對比較好用的

00:18:12.280 --> 00:18:15.600
我們等下會一併告訴大家是怎麼使用

00:18:18.380 --> 00:18:23.440
我們這邊可以使用npm sotre去安裝express-generator跟nodemon

00:18:24.960 --> 00:18:31.900
這邊用 -g 的話就是全域安裝，安裝完我們就可以在整台電腦使用

00:18:35.080 --> 00:18:37.520
這個是安裝畫面，我們需要等一下

00:18:47.080 --> 00:18:50.720
如果說沒有任何錯誤的話，這樣就安裝完成了

00:18:52.100 --> 00:18:56.160
那我們事實上可以繼續做一下測試

00:18:56.640 --> 00:19:02.620
express -h 就是help的意思，就是你觀看這個套件是怎麼使用的

00:19:02.620 --> 00:19:06.660
那它這個說怎麼使用express，然後options dir

00:19:07.000 --> 00:19:12.880
你的資料夾是要建甚麼東西，我們這邊的話事實上

00:19:14.260 --> 00:19:18.800
有一個叫 -e，那我們等下會用，這主要是template的engine

00:19:19.040 --> 00:19:23.560
那我們等下會再說是甚麼，預設的話是jade

00:19:24.220 --> 00:19:28.940
還有甚麼handlebars之類的，事實上這些都是

00:19:29.300 --> 00:19:35.200
在渲染view的時候，畫面的一個模板引擎

00:19:35.200 --> 00:19:38.040
我們這邊比較方便的話，我們用ejs

00:19:38.280 --> 00:19:42.520
也就是說我們等下在產生的時候，事實上要注意一下

00:19:42.520 --> 00:19:47.800
但你也可以CSS去設定要不一樣的，可能是用Sass

00:19:48.380 --> 00:19:52.120
less 之類的一些引擎這樣子

00:19:54.740 --> 00:20:00.280
我們這邊繼續往下看，我們這邊有一個要大家產生專案

00:20:00.280 --> 00:20:03.700
我們這邊就express -e examples

00:20:04.840 --> 00:20:10.180
去產生這一個examples，這個Express Web Framework資料夾

00:20:10.360 --> 00:20:13.960
我們剛剛講過就是說Express generator，它主要是是一個鷹架

00:20:13.960 --> 00:20:21.180
幫你架起來基本的骨幹，你可以站在巨人的肩膀上，去開發這個Web application

00:20:21.680 --> 00:20:25.140
那我們這邊移動的話，就移動到資料夾然後npm install

00:20:26.060 --> 00:20:31.580
我們這邊的話是安裝mongoose這個套件

00:20:32.320 --> 00:20:37.100
nodemon就是說我們可以啟動這個server

00:20:37.720 --> 00:20:39.600
那我們直接來看一下

00:20:40.560 --> 00:20:44.780
如果說你想看範例程式的話，我們事實上這邊

00:20:47.260 --> 00:20:51.560
在單元16，我們這邊有一個examples裡面就有

00:20:52.160 --> 00:20:57.920
app.js這一個我們產生出來，主要一個架構的核心檔案

00:21:00.440 --> 00:21:04.580
待會我們這邊會繼續介紹，如果你產生出來大慨會是長這個樣子

00:21:06.400 --> 00:21:12.620
那我們這邊移送出去。因為我這邊已經產生過，所以我產生一個新的

00:21:17.240 --> 00:21:23.740
這樣就會產生完成，你會發現他已經創建了一個examples1、examples1/package.json的檔案

00:21:24.200 --> 00:21:28.220
他上面是有一些指示，你事實上也可以參考得做

00:21:29.620 --> 00:21:33.380
然後移動到這裡面，移動進來這個資料夾

00:21:33.380 --> 00:21:34.880
有看到嗎?exceptions1

00:21:35.640 --> 00:21:40.020
然後我們來做一件事情，就是npm install

00:21:40.660 --> 00:21:43.560
通常我們在完成一個專案資料夾的下載的時候

00:21:43.560 --> 00:21:52.120
如果說它有package.json去設定說，它有那些套件要去安裝的話

00:21:52.120 --> 00:21:55.280
這事實上你就要自行用npm install去安裝

00:21:55.280 --> 00:22:01.460
那當然有brower的一些設定的話，可能也要安裝

00:22:01.460 --> 00:22:07.960
那我們這邊是沒額外自己再做設定，所以我們額外再設定

00:22:08.540 --> 00:22:15.420
事實上我們這邊就可以來這邊看了，examples先收起來

00:22:15.420 --> 00:22:21.560
這個事實上就是我們最基本的一個檔案，你看這邊都是產生出來的

00:22:21.580 --> 00:22:24.980
這個我們剛剛是沒有嘛，我們剛剛只有examples這個資料夾

00:22:24.980 --> 00:22:31.020
後來我們用express

00:22:31.020 --> 00:22:37.600
express -e examples1，我們這邊就會產生這一個資料夾

00:22:37.600 --> 00:22:41.640
這邊有views、routes、public

00:22:42.800 --> 00:22:47.300
主要是大慨是這樣子，我們用npm install，所以就有這個node_modules出來了

00:22:47.300 --> 00:22:52.240
那這一些是它預設要裝的東西啦

00:22:52.600 --> 00:22:56.060
那我們主要還是focus在我們核心的程式碼上面

00:22:57.120 --> 00:23:01.000
現在我們事實上可以做一件事，就是npm start

00:23:05.460 --> 00:23:11.780
如果說一切正常的話，我們事實上可以在localhost:3000這邊看到Express初始畫面

00:23:11.780 --> 00:23:17.560
我們剛剛事實上有安裝一個叫nodemon這一個東西

00:23:17.560 --> 00:23:22.240
那我們事實上可以去使用它nodemon

00:23:23.920 --> 00:23:31.160
nodemon的話，你事實上可以用 ./server.js localhost 3000

00:23:31.620 --> 00:23:38.560
nodemon這個可以做甚麼用呢?nodemon事實上就是可以讓你

00:23:38.560 --> 00:23:43.700
當你有修改的時候，事實上不用再重新啟動server

00:23:43.700 --> 00:23:50.120
如果說我們需要，沒有使用這個nodemon的話

00:23:50.120 --> 00:23:54.460
事實上我們可能就要這樣子重新啟動

00:23:54.460 --> 00:24:00.560
然後這樣當你有修改的時候，就要去重啟你的local server

00:24:00.560 --> 00:24:06.200
那事實上使用nodemon的話，我們可以來看一下這邊

00:24:08.080 --> 00:24:12.100
我們直接來看這邊好了，就是說我們這邊有一個Express

00:24:12.740 --> 00:24:15.180
我把它改名XDDD，這會長成甚麼東西呢?

00:24:16.260 --> 00:24:24.300
你看這個字就會變了，如果說我們今天沒有用nodemon會這樣

00:24:26.040 --> 00:24:28.340
那我今天把Express XDDD拿掉

00:24:31.520 --> 00:24:32.100
會怎樣?

00:24:32.480 --> 00:24:35.940
你看這個XDDD還在

00:24:36.280 --> 00:24:41.720
它不會消掉，因為當script有去更改的時候，事實上它需要重新去reload

00:24:41.720 --> 00:24:49.280
如果你單純用npm start是因為它內建，node去執行這一件事情

00:24:50.280 --> 00:24:55.540
就是bin www 這個script，這是內建的一個script

00:24:55.540 --> 00:25:03.380
就是說去啟動你的server去起起來，那我們這邊的話

00:25:04.760 --> 00:25:08.580
我們在開發上還是使用nodemon為主

00:25:14.340 --> 00:25:20.700
接著我們要更進一步去了解我們整個專案的架構，進行我們專案的一個開發

00:25:23.660 --> 00:25:30.040
這是我們的一個資料夾結構，事實我們是用express -e examples

00:25:30.040 --> 00:25:33.320
產生的一個Express的一個專案

00:25:33.320 --> 00:25:37.500
我們這邊因為用npm install，所以會有node_modules

00:25:37.960 --> 00:25:42.060
就是node的套件去安裝進來

00:25:42.220 --> 00:25:47.120
public就是放靜態檔案啦，就是javascript、css之類的images

00:25:47.560 --> 00:25:56.080
那我們這邊有一個models，事實上是我們跟資料庫做互動的一個script-db.js

00:25:56.340 --> 00:26:00.580
routes就是我們去做一些網頁

00:26:01.020 --> 00:26:05.160
當你的網址對應到、指到哪一個地方的時候

00:26:05.160 --> 00:26:09.300
我們要去對應做甚麼樣的一個function的處理，那這個是routes

00:26:09.820 --> 00:26:13.100
那也有一點controller在裡面

00:26:13.320 --> 00:26:19.820
views的部分，主要是我們視覺呈現跟template的一個部分

00:26:19.940 --> 00:26:25.560
通常會有一些資料透過routes這邊的controller

00:26:25.920 --> 00:26:28.760
把資料塞進來這邊，那我們就可以呈現了

00:26:28.760 --> 00:26:31.180
我們是透過server side rendering

00:26:32.460 --> 00:26:37.800
app.js是我們的主幹，是我們核心的script都在裡面

00:26:38.080 --> 00:26:41.540
package.json大家都知道，就是設定檔的部分

00:26:43.940 --> 00:26:47.140
接下來我們就要來實際看一下，我們這個express到底長甚麼樣子

00:26:48.620 --> 00:26:55.120
我們就回到examples來看，examples1就是我們教大家環境設定去啟起來的

00:26:56.440 --> 00:27:04.500
我們這個目標主要的話，就是希望能夠建一個以express為基底的一個

00:27:06.500 --> 00:27:09.600
TodoApp，那我們這邊來看一下

00:27:15.960 --> 00:27:18.240
OK~那我們這邊事實上可以

00:27:45.860 --> 00:27:50.760
大致上會長這樣，就是說它是一個代辦事項的application

00:27:52.440 --> 00:27:59.980
我們可以最簡單的功能，代辦事項 - 看電影、吃飯

00:28:00.460 --> 00:28:07.200
你有看到當你新增的時候，送提交或Enter就會出現新的新增功能

00:28:09.020 --> 00:28:12.860
就可以看到詳細內容，你也發現上面的URL也改了

00:28:13.260 --> 00:28:17.480
如果我們今天吃飯，要更精確一點我們要吃晚飯

00:28:19.280 --> 00:28:22.640
那這邊就看到代辦事項改成吃晚飯

00:28:22.640 --> 00:28:27.760
你今天假設吃飯不想做這件事情，你就刪除

00:28:27.760 --> 00:28:29.760
吃晚飯就不見啦

00:28:29.760 --> 00:28:31.840
那這個就是我們最簡單的一個TodoApp

00:28:32.080 --> 00:28:37.520
它用到的技術有NodeJS、Express，然後還有MongoDB

00:28:37.980 --> 00:28:42.480
那中間層是用Mongoose去做間接

00:28:42.480 --> 00:28:47.160
事實上完成這個簡單application，你也可以去做一些簡單其他的應用

00:28:47.160 --> 00:28:55.000
包括張貼尋人啟事、張貼工作或者說留言板阿...等

00:28:55.000 --> 00:29:00.140
或者是一個食譜分享網站，都可以透過這樣一個方式去實作

00:29:00.440 --> 00:29:04.300
我們最後還會補充一些其他額外好用的套件

00:29:04.300 --> 00:29:06.840
大家再自己去參考一下

00:29:07.400 --> 00:29:15.920
那先看這個app.js，事實上這個app.js是在你express -e 然後你的專案名稱

00:29:16.600 --> 00:29:18.960
之後建立的，就自動建立了

00:29:19.140 --> 00:29:23.020
我們這邊事實上就是可以看到就是說這個require

00:29:23.020 --> 00:29:24.440
大家還記得require嗎?

00:29:24.440 --> 00:29:30.840
require事實上就是NodeJS它在管理module的一種方式

00:29:30.840 --> 00:29:37.200
它就是用common.js的方式，那common.js的話

00:29:37.460 --> 00:29:42.120
等一下我們會講怎麼把它的模組輸出，這個會用到

00:29:42.460 --> 00:29:45.820
這邊大家記得用require去把模組引進進來

00:29:45.820 --> 00:29:49.000
express，給定這個express變數

00:29:49.000 --> 00:29:53.060
大家還記得等號是賦值的意思嗎?就是assign 值

00:29:53.500 --> 00:29:56.780
我們這邊就把值給定它，值給定它

00:29:56.780 --> 00:30:02.320
這些用到一些套件啦，有些是內建的Express、path

00:30:02.320 --> 00:30:04.900
幫你去取得路徑的一個套件

00:30:04.900 --> 00:30:11.840
那favicon的話是說，就是你會在網頁上出現會icon，這就是favicon

00:30:13.100 --> 00:30:18.480
那cookieParser就是他去處理cookie的body-parser，可以去處理一些就是

00:30:20.520 --> 00:30:25.700
我們要去做一些資料處理的一些轉換的一些東西

00:30:26.460 --> 00:30:30.500
我們這邊的話，待會會介紹

00:30:31.180 --> 00:30:38.700
像routes的話，這邊有一個叫routes的東西

00:30:39.760 --> 00:30:45.680
你會看到就是說，我們這邊事實上就是做一些get、post、get、post的一些處理

00:30:45.680 --> 00:30:51.700
就是說當你這個網頁對應到這一個URL的時候，你會去做什麼事情

00:30:52.360 --> 00:30:59.520
這就是routes要做的事情

00:31:00.700 --> 00:31:05.580
這邊把所有的routes都放到這邊來

00:31:05.580 --> 00:31:10.000
也就是這邊app.use的話，他會去管理所有的routes

00:31:11.000 --> 00:31:14.580
就是由index.js去處理，當然你可以分很多啦

00:31:14.580 --> 00:31:19.960
我們這邊就是先把它統一放在這邊去管理

00:31:19.960 --> 00:31:26.080
有些時候你可以把它分好幾個檔案去管理，沒關係我們這邊就統一一個管理

00:31:26.080 --> 00:31:33.920
我們這邊事實上就是引入一個叫express套件，也就是express的核心檔案

00:31:33.920 --> 00:31:39.580
我們這邊express的話，用Router()這個方法

00:31:39.580 --> 00:31:48.600
那我這邊Router()之後，我們就可以來做使用

00:31:49.040 --> 00:31:55.860
如果你是用get的話，假設get的一個request傳過來

00:31:55.860 --> 00:32:00.460
假設它後面是沒有接任何東西的話，它就會去做處理

00:32:00.460 --> 00:32:05.680
像我們這邊事實上，後面就沒有接任何東西，這個網址後面是沒有的

00:32:07.480 --> 00:32:16.160
我們這邊事實上當網址接收到這個的時候，我們就會去做處理

00:32:16.160 --> 00:32:22.360
我們這邊做什麼事呢?我們事實上還有引入一個叫todo - 這是從model取出來的

00:32:22.360 --> 00:32:30.200
我們這邊 .. 是上一層的意思，就是說index.js在routes這個資料夾裡面

00:32:30.400 --> 00:32:37.740
我們這邊往上去到models這邊

00:32:39.040 --> 00:32:43.860
這邊有一個叫db.js，也就是說把db.js引入進來

00:32:45.400 --> 00:32:51.980
事實上這邊是用到mongoose的地方啦，所以說我們

00:32:52.240 --> 00:32:59.200
事實上在一開始的時候會需要去安裝一些套件，在這邊package.json

00:32:59.440 --> 00:33:05.760
我們事實上要多安裝一個叫mongoose的東西，因為我們在db.js會用到

00:33:06.740 --> 00:33:12.060
在開始開發db.js之前，我們先來安裝mongoose這一個套件

00:33:12.800 --> 00:33:17.960
我們這邊事實上用npm install

00:33:22.480 --> 00:33:31.160
這邊我們就要等一下

00:33:34.840 --> 00:33:38.300
這樣就安裝完成了，如果沒有錯誤訊息

00:33:39.220 --> 00:33:45.100
因為我們有用 --save 的話，我們在我們的package.json也會看到說

00:33:45.100 --> 00:33:48.600
套件、名稱跟它的版本號都在裡面

00:33:48.600 --> 00:33:53.260
那下一次我們在npm install就可以安裝進來了

00:33:53.260 --> 00:33:59.920
mongoose這一個套件的話，它主要的功用在於說

00:33:59.920 --> 00:34:08.420
它能夠方便的用物件導向的方法，讓你去操作mongodb這樣子

00:34:09.220 --> 00:34:12.740
當然mongodb原生的一些操作方法也是ok

00:34:12.740 --> 00:34:19.020
它有一些蠻好的API，幫你包裹起來，讓你方便去看、可以去使用

00:34:19.020 --> 00:34:24.000
我們可以看一下這一個官網上的範例mongoosejs.com

00:34:24.000 --> 00:34:28.800
一開始就是用require引入mongoose這一個套件

00:34:29.160 --> 00:34:32.900
mongoose引入進來，給進這個變數mongoose，然後mongoose.connect

00:34:33.160 --> 00:34:40.740
connect這邊mongodb://localhost/，那這個的話你可以自己給定

00:34:41.300 --> 00:34:48.680
你要給定這個database這個名稱，我這邊的話

00:34:49.780 --> 00:34:56.500
就這邊官網的話就可以test，這邊mongoose的話串建一個model

00:34:56.740 --> 00:35:03.560
這個model的話，可以對應到一個類似，如果說你relational db的話

00:35:03.560 --> 00:35:07.060
就是類似資料表的感覺，但是它事實上就是一個物件

00:35:07.060 --> 00:35:11.120
我們這邊是cat物件，它有什麼屬性呢?

00:35:11.120 --> 00:35:16.540
就是name，它的型態是string

00:35:16.540 --> 00:35:22.700
這跟我們在下sql指令是事實上是比較不太一樣的

00:35:23.080 --> 00:35:27.760
如果我希望新增一筆資料是怎麼樣呢?就new cat

00:35:27.760 --> 00:35:35.560
然後把這一個大括號丟了name，然後這一個貓的名字是什麼?

00:35:35.560 --> 00:35:38.020
然後叫kitty ，給定一個變數叫kitty

00:35:38.020 --> 00:35:43.240
那它類似好像在new一個物件，這樣就形成一筆資料了

00:35:44.300 --> 00:35:46.500
但是我們這邊要save把它save起來

00:35:46.500 --> 00:35:52.220
如果說有error就印出來，沒有的話我們就完成這個save

00:35:52.540 --> 00:35:56.640
就形成完成新增一筆資料了。有沒有非常簡單的感覺

00:35:56.640 --> 00:36:00.800
就是說這樣就能去操作資料庫了，這就是mongoose的功用

00:36:00.800 --> 00:36:06.340
它使用類似一個叫orm的功能

00:36:07.420 --> 00:36:12.800
那orm是什麼呢?這邊事實上就是寫了wiki Object Relational Mapping

00:36:12.800 --> 00:36:19.460
就是說可以讓用物件導向的方式，去操作不同資料的轉換

00:36:21.460 --> 00:36:27.520
它就是降低你一些操作的一些成本，相對效能上面

00:36:27.520 --> 00:36:32.720
就是orm比起一些，就是可能單純用sql或者什麼之類的

00:36:32.720 --> 00:36:35.960
會稍微差一點，但就是簡便啦

00:36:36.880 --> 00:36:40.560
我事實上可以來看就是說

00:36:42.100 --> 00:36:48.580
這個mongoose的一個document是怎麼寫的，事實上裡面有非常多的一些API

00:36:48.580 --> 00:36:53.220
或者是說一些屬性值要怎麼去設這樣子

00:36:53.500 --> 00:37:00.640
這邊事實上就是設定schema，就是資料的一個格式

00:37:01.200 --> 00:37:06.440
那我們這邊就是可以看到它像是一個block的schema

00:37:07.200 --> 00:37:08.560
schema

00:37:09.060 --> 00:37:13.740
那這個schema的話，它就是有title

00:37:13.740 --> 00:37:19.100
就是說一篇部落格，可能會有title然後作者

00:37:19.360 --> 00:37:25.340
然後內容是什麼 - comments，可能還是有時間

00:37:27.340 --> 00:37:30.100
那這個schema是這樣定的

00:37:31.260 --> 00:37:34.960
我們這邊事實上也會用到，我們就回頭過來看我們的db.js

00:37:34.960 --> 00:37:39.680
我們mongoose已經安裝好了，那我這邊就設定這個叫做TodoApp

00:37:40.500 --> 00:37:45.420
那我這邊建了一個schema，用一個Object把它包起來，title是string

00:37:45.420 --> 00:37:52.100
就是說我這邊是比較簡單的一個TodoApp，我們回過來看我們這個application

00:37:52.100 --> 00:37:54.900
事實上這個TodoApp，資料就存了兩件事情

00:37:56.820 --> 00:38:00.820
代辦事項的title跟它的時間，就兩件事情

00:38:00.820 --> 00:38:05.780
我們這邊簡化啦~那大家如果熟悉這個，事實上就觸類旁通

00:38:05.780 --> 00:38:12.080
這就會比較容易去理解。那title - string是它的{\s1}類別{\s0}型別

00:38:12.080 --> 00:38:17.660
date我們設定了一些事情，就是說它的type是Date

00:38:17.660 --> 00:38:22.440
default值是這個Date，大家還記得嗎?JavaScript內建的Date.now的話

00:38:22.440 --> 00:38:28.280
是內建的時間，那我們就會顯示現在的時間這樣子跟object

00:38:28.960 --> 00:38:33.840
那這個module.exports是什麼呢?就是說我們不是有什麼require嗎?

00:38:34.840 --> 00:38:37.940
如果當你這個module要給別人使用，要怎麼用呢?

00:38:37.940 --> 00:38:39.800
就用module.exports

00:38:40.520 --> 00:38:45.600
然後我們這邊用一個mongoose的一個方法叫model

00:38:47.600 --> 00:38:55.820
把model跟它的schema丟進去，所以我這樣就可以輸出給別人使用了

00:38:56.760 --> 00:39:01.620
那這樣就完成建schema的過程，我們可以回過來看一下

00:39:02.160 --> 00:39:08.920
譬如說當你要建一個schema的時候，事實上可以這樣去做使用這樣子

00:39:09.560 --> 00:39:15.340
設定你這個model要叫什麼名字，那schema把它丟進來

00:39:15.340 --> 00:39:19.220
那把它建好之後，輸出出去

00:39:19.700 --> 00:39:26.380
輸出出去之後我們回到index.js，我們這邊就可以把它引入進來 - Todo

00:39:26.380 --> 00:39:29.860
這個叫model.exports，在這邊把它輸出出來

00:39:30.740 --> 00:39:33.600
schema建好了，我在這邊把它引入進來 - Todo

00:39:33.600 --> 00:39:38.640
Todo我就可以做一些操作，我們這邊之前有講過CRUD

00:39:39.140 --> 00:39:46.980
新增-Create、R是read、U是upeate、d是delete

00:39:47.180 --> 00:39:54.220
在我這邊事實上Todo就可以去做find，find就是把所有的資料都讀出來、撈出來

00:39:54.540 --> 00:39:59.760
那new的話，這邊大家還記得new cat，這邊的話就new Todo然後save

00:39:59.760 --> 00:40:04.680
就可以新增一筆資料，那findById就是找特定ID的

00:40:04.680 --> 00:40:11.280
OK~因為我們要做一些特定的操作，所以這邊就要findById

00:40:11.280 --> 00:40:16.920
那我們先照一個頁面走好了

00:40:17.600 --> 00:40:25.520
我們回過頭來看我們的application，事實上這個頁面就是我們的

00:40:25.520 --> 00:40:31.020
我們在views這邊，views這邊我事實上做了一些事情

00:40:31.020 --> 00:40:36.740
index - 我們這邊事實上可以改成html，因為它是ejs

00:40:37.200 --> 00:40:43.280
ejs的話是模板語言，我們等下來看一下

00:40:44.180 --> 00:40:53.120
我們現在對應看一下，這個index.ejs是當你如果說的網址是完全沒有其他東西的 時候，事實上它會去做這件事情

00:40:53.840 --> 00:40:57.220
它會去執行後面這邊funcion，它是一個callback function

00:40:58.100 --> 00:41:03.600
也就是說這個router，當get url是這樣的時候

00:41:04.640 --> 00:41:10.200
就會去執行這一個function，它有自帶的一些參數

00:41:10.200 --> 00:41:14.020
叫require、resposition和next

00:41:14.020 --> 00:41:19.280
那next的話，會有一些modile ware的一些東西，那我們這邊先不講這個

00:41:20.060 --> 00:41:26.620
先來處理一下這個，那這個todo.find，就是我們沒有find任何東西

00:41:26.620 --> 00:41:32.560
沒有給它特定的條件，那我們這邊的funciton就會說去執行那個find

00:41:32.560 --> 00:41:37.880
然後去執行一個function後面是接一個function

00:41:37.880 --> 00:41:42.160
這個callback function，那它第一個參數自帶是error

00:41:42.160 --> 00:41:46.940
如果說有error的話，你可以去console.log(error)去印出來

00:41:46.940 --> 00:41:57.360
或者說你去做些比較嚴謹的判斷，就是說當如果是有error的話，你就去印error出來之類的

00:41:59.100 --> 00:42:03.860
或者是不繼續往下執行了

00:42:05.860 --> 00:42:09.320
那我們這邊簡易，就不先做這個處理了

00:42:09.320 --> 00:42:11.660
那todos的話就是說

00:42:12.580 --> 00:42:17.520
我這邊有一個response，我要去回應這個請求

00:42:17.520 --> 00:42:22.180
那request事實上就是你送過來的請求，response就是回應的請求

00:42:22.640 --> 00:42:29.020
那response的裡面有一個方法叫做render，render它就是要把頁面render出來

00:42:29.240 --> 00:42:31.120
那我這邊index是什麼呢?

00:42:31.460 --> 00:42:38.820
事實上這個views在這個App這邊有一個對應就是說

00:42:39.560 --> 00:42:46.500
我們要用這這一個views，我們用的engine是ejs

00:42:46.500 --> 00:42:49.360
這邊順便講一下ejs

00:42:50.220 --> 00:43:02.560
那ejs事實上是一個express用來處理view的一個template、一個方法、一個工具

00:43:02.560 --> 00:43:07.600
應該算engine這樣子，它事實上就是

00:43:07.600 --> 00:43:10.900
有一些特性，我來看一下

00:43:11.420 --> 00:43:15.140
他事實上有兩個頁面，但我們可以選一個看

00:43:15.140 --> 00:43:18.740
它主要的話就是，你可以想像就是說

00:43:19.280 --> 00:43:25.400
它事實上就是從資料庫或server side把資料塞到裡面

00:43:25.400 --> 00:43:34.280
你這個看是不是html的頁面，但它事實上可以寫一些把一些動態資料把它塞進來

00:43:34.280 --> 00:43:38.380
像我這邊，我們用這個解釋好了，就是說

00:43:38.380 --> 00:43:45.800
我render index，index事實上是指到views這個資料夾裡面的index.ejs

00:43:45.800 --> 00:43:50.900
後面放一個物件是什麼意思?呢就是我把title丟進來

00:43:52.160 --> 00:43:55.640
那我把todos丟進來，也就是說這個塞進來之後

00:43:55.640 --> 00:44:04.460
我事實上在index.ejs這一個頁面，我就可以去把todos跟title取出來

00:44:05.060 --> 00:44:05.880
有看到嗎?

00:44:06.560 --> 00:44:09.180
也就是說，我這邊做一個示範好了

00:44:09.180 --> 00:44:12.980
我這邊有個TodoApp，那我今天把它加XDDD

00:44:13.500 --> 00:44:15.160
這邊因為

00:44:16.980 --> 00:44:18.520
nodemon

00:44:31.220 --> 00:44:35.000
先把服務啟起來，我們再回過來看這邊

00:44:36.100 --> 00:44:39.960
你看這邊就有XDDD，有沒有發現

00:44:40.380 --> 00:44:41.960
我這邊index嘛

00:44:41.960 --> 00:44:45.740
我的H1這邊這一塊

00:44:46.580 --> 00:44:55.140
事實上這個title是在這個 < 然後 % =，% > 的裡面

00:44:55.140 --> 00:45:00.180
這個就是一種template的language一種寫法

00:45:00.700 --> 00:45:08.200
也就是說我可以在這個後面這一個操作的時候，把我想要做的資料處理

00:45:09.480 --> 00:45:14.840
把它放在這邊，把它當作參數把它傳進去

00:45:15.420 --> 00:45:18.760
這邊的話，我就可以在前面view這邊

00:45:19.220 --> 00:45:21.920
去當作變數把它接出來，然後印出來

00:45:21.920 --> 00:45:25.360
那這個同樣的道理是這樣子

00:45:25.360 --> 00:45:30.680
就是說因為我在這邊事實上做的就是，我要把資料撈出來

00:45:30.680 --> 00:45:38.220
但是我還是希望在這邊讓使用者可以看到，所以說我也把todos

00:45:39.040 --> 00:45:43.080
這邊是Todo.find去把所有，就是因為沒有設條件

00:45:43.080 --> 00:45:48.000
所以說我這邊所有資料庫的todo就會把它撈出來

00:45:48.000 --> 00:45:53.000
那我在這邊接起來 todos，然後指定一個名字叫todos

00:45:53.280 --> 00:45:58.140
也就是說我在index.js可以接到todos這個東西，那我們這邊用for loop

00:45:59.800 --> 00:46:04.080
大家有看到嗎? 這邊 這邊寫法跟這邊比較不一樣，我們等下會講

00:46:04.820 --> 00:46:14.380
我事實上就是用<% 然後跑一個for loop，這個大家應該知道let設定i = 0開始跑

00:46:14.380 --> 00:46:21.680
小於就是todos的長度，也就是說我會就是去把它跑一個迴圈

00:46:23.100 --> 00:46:26.320
我這邊事實上把我們要印的東西印出來

00:46:27.240 --> 00:46:31.280
那這邊是一個就是table，那是tr td

00:46:31.780 --> 00:46:37.680
那這邊就是一行一行，這樣一row 一row 把它印出來

00:46:38.300 --> 00:46:48.540
那這邊我事實上就是設定了todos[i]，就是說第0筆、第1筆、第2筆

00:46:48.540 --> 00:46:54.100
因為這個todos事實上是一個陣列

00:46:54.100 --> 00:47:01.800
所以說我把它就是用for loop 把它跑出來，所以說一個陣列，每一個陣列都是object

00:47:04.240 --> 00:47:10.420
所以說每個陣列內容再取出id或者說它的title

00:47:10.840 --> 00:47:14.060
那我這樣的話就可以把它印出來，就是說這一個

00:47:14.480 --> 00:47:20.240
有看到就是下面這邊有顯示出來，這一個它這一個todos它的id

00:47:20.520 --> 00:47:22.960
也就是我點擊的時候，事實上你看它的網址

00:47:22.960 --> 00:47:28.720
就是說這個todos它的id會回來

00:47:29.160 --> 00:47:33.660
這個就是它的名稱，後面是它的todos

00:47:34.500 --> 00:47:41.640
因為 i 是從0開始累加到那個長度的前一個

00:47:41.640 --> 00:47:48.820
就是我們是從0、1、2、3、4開始的，這邊的話就是從0、1、2、3、4開始

00:47:48.820 --> 00:47:53.000
取出這個date的資料

00:47:53.740 --> 00:48:02.260
這樣大家理解意思嗎?就是說我這邊事實上是好幾筆是這樣子有title有date的資料

00:48:02.780 --> 00:48:05.620
放在一個類似陣列的東西裡面

00:48:08.920 --> 00:48:13.220
那這樣的話我透過for loop就可以把所有的資料印出來

00:48:13.220 --> 00:48:17.480
印出來之後就會像這樣 ，一筆一筆這樣的資料

00:48:17.680 --> 00:48:22.740
那這個就是template language的一個作法，我這邊事實上做一些事情

00:48:22.740 --> 00:48:29.860
就是說一個form表單，讓你可以在這邊提交就可以把它送出來

00:48:30.100 --> 00:48:35.280
記得這邊我們是用post，它不會在網址列傳輸的

00:48:35.280 --> 00:48:40.240
它是在http的裡面的內容去做傳輸這樣子

00:48:40.580 --> 00:48:43.720
那我們等下會講說這個body怎麼會被處理到

00:48:43.720 --> 00:48:51.580
這邊action跟create，這邊是input，我們用一些bootstrap東西它就會把class加進去

00:48:52.240 --> 00:48:57.560
這個name很重要，就是說這個title我們會在後面會取得的資料

00:48:57.560 --> 00:49:00.880
那等下我會講這是一個submit placeholder

00:49:01.840 --> 00:49:05.240
那我這邊事實上做了一件事情，就是接create

00:49:05.240 --> 00:49:07.240
有沒有看到這是post，有看到嗎?

00:49:07.240 --> 00:49:11.380
就是說我這邊method是post，這邊action是create

00:49:11.380 --> 00:49:15.520
然後在這邊post然後create就接起來了

00:49:15.520 --> 00:49:20.280
也就是說當我提交送出的時候，就會用這個處理器去處理

00:49:20.280 --> 00:49:24.580
那我這邊就function就說當接到要怎麼處理

00:49:24.580 --> 00:49:29.600
同樣request response，這個request就會出現它的功效了

00:49:29.600 --> 00:49:35.300
那我這邊是new這個Todo，然後把它要存進資料是這邊

00:49:35.300 --> 00:49:41.740
title然後request，那body，body是什麼意思呢?

00:49:41.740 --> 00:49:50.100
就是說我這邊事實上有一件事情叫做bodyParser.urlencoded

00:49:50.100 --> 00:49:55.300
那我這邊事實上可以來看一下就是這個解釋

00:49:55.300 --> 00:50:02.920
就是說就是express事實上有提供一個叫body.Parser去處理那個

00:50:02.920 --> 00:50:06.980
送過來這個post的參數的解析

00:50:06.980 --> 00:50:14.860
也就是說我這邊不是用post嗎?所以說我就是要透過一個

00:50:16.860 --> 00:50:22.600
處理的方式去處理這樣子，那我這邊就是用body.parser

00:50:22.600 --> 00:50:30.760
那body.parser有幾種就是處理資料方式，有raw、json、urlencoded

00:50:30.760 --> 00:50:36.840
那這邊事實上就是各個parser會做不同的解析

00:50:36.840 --> 00:50:42.560
像我這邊的話事實上就做了json跟urlencoded

00:50:42.560 --> 00:50:49.700
所以說我最終的話就是資料傳過來會是json的格式，讓我去取得資料

00:50:53.720 --> 00:50:57.260
我們這邊extended false的話，我們可以來看一下這個

00:51:03.340 --> 00:51:06.120
這邊，等一下我們來看一下這個

00:51:15.460 --> 00:51:19.700
那這個body.parser事實上在GitHub上有說明

00:51:19.700 --> 00:51:24.700
就是說它是一個parser的一個middleware(中間件)

00:51:24.700 --> 00:51:30.500
那我們等下會講中間件是什麼，就是說在這個express跟NodeJS裡面

00:51:30.500 --> 00:51:32.900
middleware事實上是一個蠻重要的東西

00:51:34.800 --> 00:51:40.160
通常你在處理一些request的東西的時候，都會用到middleware的東西

00:51:41.440 --> 00:51:45.240
我們這邊body.parser事實上就是middleware的其中一層

00:51:45.240 --> 00:51:47.240
這個有點模糊

00:51:48.060 --> 00:51:48.840
我看一下

00:52:31.860 --> 00:52:35.380
那我們這邊直接從這邊看，就是說一個request過來

00:52:35.380 --> 00:52:39.240
它可能會經過幾個middleware才真正的response回去

00:52:39.700 --> 00:52:45.720
你能感受到嗎?就是說它可能有Cookie Middleware、Session Middleware、Post BodyParser

00:52:46.660 --> 00:52:50.000
那這一些東西，也就是說它類似就是洋蔥的一層

00:52:50.000 --> 00:52:54.200
就是一層的，你可以就是你新增你想要的middleware

00:52:54.500 --> 00:52:58.220
在你就是真正response回去之前，你先做一些處理

00:53:00.240 --> 00:53:04.260
這一個的話，就是說因為這個事實上是相對於輕量級的framework

00:53:04.260 --> 00:53:06.420
也就是說它不是所有的東西都包在一起

00:53:06.420 --> 00:53:11.480
你可以加你想要的東西，就是說你想要cookie處理，你就加Cookie Middleware

00:53:11.480 --> 00:53:14.660
如果說你想要session處理，你就加Session Middleware

00:53:14.660 --> 00:53:20.060
如果你希望在post的處理，就是說使用者用post提交表單的時候要做一些處理

00:53:20.060 --> 00:53:22.220
那你就加Post BodyParser

00:53:22.380 --> 00:53:29.420
如果你希望在這個request中間加一些logger，就是說你可以在console這邊去做一些處理

00:53:30.000 --> 00:53:33.740
去做一些就是logging動作的話，去紀錄一些事情

00:53:33.740 --> 00:53:36.340
就加HTTP Logger Middleware

00:53:36.340 --> 00:53:41.060
如果說你想要加一個Favicon，就是小標籤的icon，你就加這個Middleware

00:53:41.400 --> 00:53:45.600
然後如果你有靜態檔案的server要處理或者是要做router

00:53:45.600 --> 00:53:49.660
做一些URL的一些處理，就加Middleware

00:53:49.660 --> 00:53:53.480
就是說在request到response中間，你可以做一些Middleware的處理

00:53:53.480 --> 00:53:58.880
這個是比較特別的一個處理方式，那BodyParser只是其中一個

00:54:00.380 --> 00:54:04.820
這邊事實上還有一個比較重要的觀念，就是說像form表單

00:54:04.820 --> 00:54:07.540
像一般forn表單長這樣，action

00:54:09.240 --> 00:54:14.880
但是如果說你的action這邊method是使用post的話

00:54:14.880 --> 00:54:21.860
事實上有常見的4種post提交方式，大概是這4種

00:54:22.440 --> 00:54:28.000
這也就是說這邊為什麼，會有什麼urlencoded跟json的方式

00:54:28.000 --> 00:54:32.360
因為我們先這邊只處理這種，2種就是post的資料傳動

00:54:32.360 --> 00:54:34.340
傳遞過來的資訊這樣子

00:54:34.340 --> 00:54:41.880
post事實上最基本的一種，在form表單有一種叫

00:54:42.700 --> 00:54:47.240
enctype這一個屬性，就是除了method action之類

00:54:47.240 --> 00:54:50.160
可以去設定這個enctype屬性

00:54:50.640 --> 00:54:57.020
如果說沒有設定的話，它default是這個 application/x-www-form-urlencoded

00:54:57.020 --> 00:55:01.100
這個會怎麼樣呢?就是說它會把所有提交表單的資料

00:55:02.300 --> 00:55:04.160
轉化成這樣的格式

00:55:05.540 --> 00:55:12.100
就是說它key-value & key-value的格式去encoded去編碼

00:55:13.880 --> 00:55:22.100
如果說你有要上傳檔案或文件的話，你就要把這個enctype改成multipart/form-data

00:55:23.240 --> 00:55:33.640
也就是說你在這一個，這邊事實上可以去加這一件事情

00:55:34.400 --> 00:55:37.400
你可以去改，default是這一個

00:55:38.220 --> 00:55:45.860
那你如果你是要上傳檔案，你的表單裡面是有就是input是file就要用這一個，要記得

00:55:46.360 --> 00:55:54.660
如果你完全沒有寫就是預設就是這一個，這是一般用的表單

00:55:54.660 --> 00:56:01.380
那還有另外一種就是json檔案，就是說你可能傳資料是用json格式的，你希望這樣傳

00:56:02.260 --> 00:56:04.380
另外一種是xml，這邊我們就不提了

00:56:05.580 --> 00:56:11.860
所以我們這邊事實上在這個body.parser的時候，我們去做這個post資料處理的時候

00:56:11.860 --> 00:56:13.860
我們處理了json跟urlencoded

00:56:13.860 --> 00:56:18.740
那這個extends是說就是你要選擇哪種library，你可以再去看

00:56:18.740 --> 00:56:28.140
就是說這邊extends有去說明，你是要用querystring的library還是用qs library

00:56:28.460 --> 00:56:31.220
這個是比較細節的，大家自己再去看一下

00:56:31.760 --> 00:56:36.540
那我們這邊就用false，就用就是querystring的library

00:56:37.260 --> 00:56:39.360
那這邊有cookieParser可以去處理cookie

00:56:39.360 --> 00:56:43.640
那我們這個靜態檔案這部分，我們就放在public這邊

00:56:43.640 --> 00:56:53.760
那這個path.join是把這個__dirname，意思是說目前所處的資料夾的名稱

00:56:53.760 --> 00:56:59.960
所以我們就會把這個靜態檔案都放到這一個public部分，所以你會看到

00:56:59.960 --> 00:57:04.380
不管是imges也好，javascripts、stylesheets都放在裡面

00:57:04.380 --> 00:57:08.920
就是因為我們有用到bootstrap，所以我們用bower_components

00:57:08.920 --> 00:57:14.540
所以我們在bowerrc這邊，有這個directory就是

00:57:14.540 --> 00:57:19.480
會把它放在public裡面，所以我只要bower install bootstrap的話

00:57:19.480 --> 00:57:24.600
--save就會安裝在這邊

00:57:24.600 --> 00:57:29.960
bower.json也會記錄說我們這邊有安裝什麼東西

00:57:30.740 --> 00:57:39.900
那我這邊事實上還有就是其他一些404還有500的處理，我們就先不管它

00:57:39.900 --> 00:57:45.840
所以我們這邊大概就了解了，就是從template engine這邊

00:57:46.540 --> 00:57:50.900
template engine

00:57:53.780 --> 00:57:59.440
然後介紹Middleware，那這邊有看到就是小括號

00:57:59.440 --> 00:58:09.340
然後<然後%，然後可以去寫類似javascript的一個iterator就是for loop

00:58:11.700 --> 00:58:19.500
如果說你是那個要把變數展示出來的話，你要這邊就是加一個等號

00:58:19.500 --> 00:58:22.060
有發現嗎?title前面要加等號

00:58:22.060 --> 00:58:26.420
如果說你是一個邏輯的部分，就這樣不用加等號

00:58:26.420 --> 00:58:28.420
有看到嗎?

00:58:28.660 --> 00:58:31.400
那這個就是template script的一種寫法

00:58:32.700 --> 00:58:39.300
我們事實上剛講完大致的架構，大家應該已經有清楚了

00:58:39.780 --> 00:58:45.400
已經講了怎麼讀取資料出來。那我們現在來講，新增也講完了

00:58:45.400 --> 00:58:49.320
那我們現在講下一個就是說我怎麼去修改

00:58:49.840 --> 00:58:53.860
那修改這邊的話事實上有兩件事情要做

00:58:53.860 --> 00:59:01.440
就是說第一件事-我們先講這個好了，進去這個todos然後後面id，有發現嗎?

00:59:01.440 --> 00:59:07.820
todos一個get這個url，然後它不是什麼form傳遞的get

00:59:08.720 --> 00:59:14.740
那這id，這個 :id 就是說我可以在這個，有看到嗎?

00:59:14.740 --> 00:59:24.400
這個request這邊，去用params就是參數去把它取出來

00:59:24.400 --> 00:59:29.760
所以說我這邊id，在這邊id就會取出來

00:59:30.400 --> 00:59:36.400
如果你覺得看不太清楚的話，事實上你可以去下一些console.log

00:59:36.400 --> 00:59:40.540
大家記得就是說在server side跳console.log，你要在終端機才看得到

00:59:41.880 --> 00:59:45.180
你看它自動重啟了

00:59:48.420 --> 00:59:51.360
事實上重啟server，有看到嗎?就是說這邊

00:59:52.760 --> 00:59:57.160
這個跟這個一樣嘛!583ecafe

00:59:57.160 --> 01:00:04.100
583ecafe在這邊，這邊就是這個req.params然後id

01:00:05.200 --> 01:00:09.500
這跟body不一樣，這個body的話就是說

01:00:09.500 --> 01:00:12.880
剛剛那個新增資料，新增todo

01:00:13.760 --> 01:00:20.160
就是說我只要create的時候，送出這個body的title

01:00:21.420 --> 01:00:23.200
因為這個name，大家還記得嗎?

01:00:23.200 --> 01:00:26.680
form的input這個name title，在後端可以找到它

01:00:26.680 --> 01:00:31.740
我們就是要講這一件事情，req.body.title就會把那個值取出來了

01:00:32.240 --> 01:00:35.980
那就會把它放進去。那這邊相對不一樣，這是parmas.id

01:00:35.980 --> 01:00:40.240
那我們同樣也來看一下好了，用印出來大家比較清楚

01:00:40.240 --> 01:00:42.240
把這個印出來

01:00:52.060 --> 01:00:56.960
這邊。我這邊事實上做了假設是ABC

01:00:58.680 --> 01:01:03.180
那輸入。新增了，新增成功之後

01:01:11.580 --> 01:01:12.880
它這邊

01:01:14.880 --> 01:01:17.920
因為直接render掉，所以看不到

01:01:20.100 --> 01:01:21.220
那我們改一下好了

01:01:30.180 --> 01:01:36.460
有看到ABCC出來了，就是說因為我這邊先把它註解掉了

01:01:36.460 --> 01:01:40.640
就是說我這個req.body.title事實上就是這一個

01:01:42.640 --> 01:01:46.860
這一個input輸入的這一個title，OK嗎?

01:01:47.340 --> 01:01:50.180
這個就我們之前在講的，最早講html說

01:01:50.180 --> 01:01:53.580
怎麼樣前端跟後端界接，就是在這邊

01:01:53.580 --> 01:01:59.580
就是說你form提交出去之後title，然後把資料收起來

01:01:59.580 --> 01:02:02.000
然後去做一些處理，跟資料庫互動

01:02:02.000 --> 01:02:05.800
然後再把render出來，那我們這邊save之後

01:02:05.800 --> 01:02:08.360
事實上做一件事情，就是response就redirect

01:02:08.360 --> 01:02:13.240
就是說重回首頁，所以你就會看到新的出來了

01:02:13.240 --> 01:02:17.840
我們回到這邊，就是說這個是進到todo裡面的細節

01:02:17.840 --> 01:02:19.840
那這邊做了什麼事呢?就是說

01:02:19.840 --> 01:02:22.520
findById因為我們已經把id抓出來了

01:02:22.520 --> 01:02:25.420
所以它這個去找就會找到那一筆資料

01:02:25.420 --> 01:02:29.940
然後我們這邊有個todo，這邊就是

01:02:29.940 --> 01:02:34.280
把todo抓出來，跟todos不太一樣。這個是只有一筆

01:02:34.280 --> 01:02:39.020
那我們就把這一筆資料把它印出來，那我們用這個render方法

01:02:39.460 --> 01:02:44.900
那對應到edit，應該說todo這裡，sorry

01:02:45.600 --> 01:02:47.740
我們這個views裡面還有一個叫todo

01:02:48.280 --> 01:02:52.700
事實上這個長得都類似，只是我們塞得資料不一樣

01:02:54.140 --> 01:02:59.020
就把資料塞進去了，todo.title 有看到嗎? todo.title

01:02:59.020 --> 01:03:02.640
todo.id，這邊就塞進來

01:03:02.640 --> 01:03:07.740
這邊有兩個有刪除跟修改的button，那這是一個form表單

01:03:10.520 --> 01:03:15.080
修改的話，它就是會讓你去另外一個網頁

01:03:15.080 --> 01:03:18.180
就是todos然後這個id，然後edit

01:03:18.180 --> 01:03:20.320
我看一下。有看到嗎?

01:03:20.320 --> 01:03:22.320
多一個edit，你可以去修改了

01:03:24.320 --> 01:03:27.640
這是會到這個edit的頁面

01:03:29.600 --> 01:03:35.100
另外一個刪除的話，就是直接提交就這個delete的post

01:03:35.100 --> 01:03:37.100
那我們回到這邊

01:03:37.780 --> 01:03:40.100
我們這邊有一個delete，那delete的話

01:03:40.100 --> 01:03:43.700
同樣就是你就要把這個body的id給抓出來

01:03:43.700 --> 01:03:48.760
body.id我們事實上用一些小撇步

01:03:52.140 --> 01:03:56.880
我們事實上用input hidden把這個id存起來

01:03:56.880 --> 01:04:02.960
name id 然後name是id ，value是這個真正的id

01:04:02.960 --> 01:04:06.060
也就是說我事實上這input是hidden的話

01:04:06.060 --> 01:04:13.480
就是說我會出現在html裡面，但是我不會讓使用者看到。有看到嗎?

01:04:13.480 --> 01:04:15.480
hidden id

01:04:15.480 --> 01:04:21.260
這個是它的這個實際上的id。有看到嗎?

01:04:21.260 --> 01:04:26.080
那這樣的話我事實上在這邊就可以

01:04:26.880 --> 01:04:32.700
因為我們講過嘛!就是如果你是post的值的話，用body把那個值取出來

01:04:32.700 --> 01:04:38.400
那同樣我們找到這個值之後，todo callbackfunction 然後remove這個方法

01:04:38.400 --> 01:04:43.720
把它刪掉。刪掉之後我做另外一件事就是把它再導回首頁

01:04:43.720 --> 01:04:47.340
這樣刪除就結束了。那我們最後一個就是要修改

01:04:48.200 --> 01:04:52.280
修改這個就是閱讀好好玩

01:04:52.280 --> 01:04:55.500
你看~我在這邊todos然後這個edit

01:04:55.500 --> 01:04:59.820
就是todos edit，然後這是edit的頁面

01:05:00.580 --> 01:05:05.960
然後把它抓到todo丟進去，那我們在這個edit頁面

01:05:06.640 --> 01:05:10.060
那edit頁面事實上也非常簡單，其實都類似

01:05:10.060 --> 01:05:14.820
只是它在input這邊，把值塞到value裡面

01:05:14.820 --> 01:05:17.180
也就是說它變成是一個輸入框，有沒有看到

01:05:17.180 --> 01:05:19.480
就是說預設值是在裡面

01:05:20.380 --> 01:05:23.880
那你改了之後，送出去就回首頁

01:05:23.880 --> 01:05:26.160
閱讀好好玩，ok~修改成功

01:05:26.680 --> 01:05:33.100
那我們這邊事實上就是說這邊也是一個form

01:05:33.100 --> 01:05:38.180
你提交事實上就送出修改，那也是post送到edit這邊

01:05:38.180 --> 01:05:40.180
edit edit

01:05:40.180 --> 01:05:47.780
ok~edit，那我這邊就是找到這個id，那我這邊edit

01:05:48.340 --> 01:05:53.580
因為我這邊也是hidden的id，所以我取到這個id name，然後找到了

01:05:53.580 --> 01:05:59.000
那我做了一個修改，修改就是把todo的title

01:05:59.000 --> 01:06:05.020
這個，有看到嗎?就我找到這個todo的title改成req.body的title

01:06:05.400 --> 01:06:10.640
todo.date改成目前的時間，然後再save，然後再導回首頁

01:06:12.080 --> 01:06:14.460
這樣的話我們就完成一個todoApp了

01:06:14.460 --> 01:06:19.640
這邊還有一個includes，這個實際上只是去做一個拆解

01:06:19.640 --> 01:06:24.920
就是說這個express template，這個可以用一些就是比較方便

01:06:24.920 --> 01:06:30.120
因為我們事實上不管是head或footer，這種東西redundant就是會共用

01:06:30.120 --> 01:06:34.420
所以我就include進來，就是說我inculde head跟footer

01:06:34.420 --> 01:06:36.420
head。有看到嗎?

01:06:36.420 --> 01:06:40.680
我就DOCTYPE html，事實上每張index也好、tode也好、edit也好

01:06:40.680 --> 01:06:46.460
事實上都一樣，所以我就inculde的方式把head引進來

01:06:46.920 --> 01:06:49.620
那footer把它引進來

01:06:49.620 --> 01:06:54.420
也就是說我寫這樣的話事實上就會把這一個，寫這樣事實上等於這樣

01:06:59.180 --> 01:07:02.500
等一下，ok~只是因為我們這邊的話

01:07:02.500 --> 01:07:09.660
方便說假設我要修改的話，就不用每個頁面去修改，就只要改這邊

01:07:09.660 --> 01:07:14.900
引入的都蓋過了。ok~這樣的話就比較方便去做維護

01:07:17.120 --> 01:07:22.120
好~那這個就是我們todo的application，事實上還有一些延伸閱讀

01:07:22.120 --> 01:07:27.100
那就是我們在這個單元。我知道很長，但是不容易

01:07:27.100 --> 01:07:32.500
那這樣的話，事實上大家已經學會怎麼用JavaScript去寫server side

01:07:32.500 --> 01:07:37.500
後端的一個程式。那也學會了NodeJS去開發簡單的web application

01:07:37.800 --> 01:07:41.680
那恭喜大家，那大家可以再多加練習一下

01:07:41.680 --> 01:07:44.880
不管是MongoDB的操作，NodeJS、Express

01:07:45.980 --> 01:07:53.220
那再補充一下一個就是想要直接看到MongoDB的資料，事實上你可以去抓一個叫Robomnongo

01:07:56.920 --> 01:08:01.280
按connect，那我們這邊事實上有一個todoApp的一個collections

01:08:01.280 --> 01:08:03.280
那我就可以看到todos

01:08:03.280 --> 01:08:07.680
你會看到閱讀好好玩、運動。這一些資料都在裡面

01:08:07.680 --> 01:08:11.580
有它的_id，因為它的預設是用預設_id

01:08:11.580 --> 01:08:14.240
所以你取的時候，要注意一下

01:08:14.680 --> 01:08:19.620
OK~這就是這單元的內容，希望大家會喜歡。拜拜!!