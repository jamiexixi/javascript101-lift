1
00:00:00,840 --> 00:00:04,440
Hello 大家好 歡迎來到JavaScript程式設計新手村

2
00:00:04,760 --> 00:00:05,820
我是凱迪

3
00:00:06,040 --> 00:00:08,720
在單元32的部分我們將介紹

4
00:00:08,720 --> 00:00:13,860
javascript的一個主流前端函式庫跟框架的快速的一個入門

5
00:00:13,860 --> 00:00:16,440
以及reactjs 的入門初體驗

6
00:00:18,340 --> 00:00:20,600
在這個單元我們將帶大家

7
00:00:20,720 --> 00:00:25,060
快速認識現在javascript主流的前端函式庫跟框架

8
00:00:25,500 --> 00:00:27,280
那接下來會帶大家

9
00:00:27,680 --> 00:00:30,960
實際操作一個reactjs的簡單範例

10
00:00:31,460 --> 00:00:35,380
首先來介紹javascript主流的前端函式庫跟框架

11
00:00:36,060 --> 00:00:37,380
就俗話說的好

12
00:00:37,620 --> 00:00:40,260
在前端 有個前端摩爾定律

13
00:00:40,260 --> 00:00:42,120
每半年就會有

14
00:00:43,120 --> 00:00:47,880
技術的一些翻倍 以及各種的函式庫跟框架的出現

15
00:00:48,120 --> 00:00:51,560
這些雖然是個玩笑話 但事實上也反映了是說

16
00:00:51,560 --> 00:00:56,020
前端開發的一個技術的一個變化的多端這樣子

17
00:00:56,020 --> 00:00:59,660
事實上在主流的一個前端的框架

18
00:00:59,660 --> 00:01:03,040
主要是指 我們這邊指的是javascript的一個

19
00:01:03,040 --> 00:01:05,020
framework或library

20
00:01:05,020 --> 00:01:05,040
那甚麼css的一些framework
framework或library

21
00:01:05,040 --> 00:01:07,580
那甚麼css的一些framework

22
00:01:07,580 --> 00:01:10,240
bootstrap peerjs

23
00:01:10,240 --> 00:01:11,860
或者semantic ui

24
00:01:11,860 --> 00:01:13,860
那些其它我們這不考慮

25
00:01:13,860 --> 00:01:18,840
我們這邊考慮的是javascript的前端框架跟函式庫

26
00:01:20,720 --> 00:01:26,320
事實上我們可以從這張圖去看到說目前javascript的框架函式庫的分佈

27
00:01:26,620 --> 00:01:28,000
包括就是現在

28
00:01:28,260 --> 00:01:30,280
蠻多人在談論的react

29
00:01:30,280 --> 00:01:33,000
react事實上他是主要的話

30
00:01:33,000 --> 00:01:36,000
如果你model view

31
00:01:36,240 --> 00:01:38,900
controller mvc框架來看的話

32
00:01:38,900 --> 00:01:41,980
他比較像是focus在view的部分

33
00:01:41,980 --> 00:01:44,520
當然他搭配其他一些像

34
00:01:44,520 --> 00:01:47,300
redux react router等等之類的

35
00:01:47,300 --> 00:01:50,760
才更讓他像一個框架

36
00:01:50,760 --> 00:01:54,520
而不是單純專注在view的函式庫

37
00:01:54,520 --> 00:01:57,080
相比於react之外

38
00:01:57,080 --> 00:01:59,900
還有像是大家也常談論到的像angular

39
00:02:00,200 --> 00:02:02,980
那angular事實上隨者它版本的更迭

40
00:02:02,980 --> 00:02:07,140
現在有分angular 1.x跟angular 2.0

41
00:02:07,140 --> 00:02:09,280
那2.0的部分主要就是

42
00:02:09,280 --> 00:02:13,660
它的特色在於說他就是主要語法是es6為主啦

43
00:02:13,660 --> 00:02:16,320
那也增加蠻多一些

44
00:02:16,320 --> 00:02:19,240
讓他的component 更容易去撰寫這些特性

45
00:02:19,240 --> 00:02:24,980
那在這邊的話還有一些像vue.js和

46
00:02:26,560 --> 00:02:28,940
backbone.js還有jquery這些

47
00:02:28,940 --> 00:02:33,160
事實上都是蠻常見的一個就是framework或library

48
00:02:34,260 --> 00:02:39,700
那這個我們來看象限 這個就是說事實上

49
00:02:40,220 --> 00:02:42,540
橫軸我們來看x軸

50
00:02:42,540 --> 00:02:44,960
就是說他從simple到full stack

51
00:02:44,960 --> 00:02:46,360
這甚麼意思呢 就是說

52
00:02:46,360 --> 00:02:51,260
他是簡單的框架還是說他是大而全的框架

53
00:02:51,260 --> 00:02:52,920
那像這個angular

54
00:02:52,920 --> 00:02:54,700
大部分他都是屬於這邊啦

55
00:02:54,700 --> 00:02:57,360
就是說他是大而全的框架

56
00:02:57,360 --> 00:03:00,060
那y軸是甚麼呢

57
00:03:00,060 --> 00:03:03,280
y軸是說有沒有automatic data binding

58
00:03:03,740 --> 00:03:06,040
data binding 那這個data binding

59
00:03:06,040 --> 00:03:10,160
如果說是在這個上面的話就是說自動的一個綁定

60
00:03:10,160 --> 00:03:12,780
那我們看到vuejs angular1.x

61
00:03:12,780 --> 00:03:20,220
還有這個aurelia的部分 也是就是

62
00:03:20,220 --> 00:03:22,220
automatic data binding的部分

63
00:03:22,220 --> 00:03:27,400
下面這個手動的binding的話 就是像react ember

64
00:03:27,400 --> 00:03:31,560
ember也是一個算是算蠻常見的一個

65
00:03:32,160 --> 00:03:34,820
mvc的一個javascript的一個framework

66
00:03:34,820 --> 00:03:36,820
也是大而全的一個framework這樣子

67
00:03:37,320 --> 00:03:41,760
那backbone.js的話就是相對輕量很多

68
00:03:41,760 --> 00:03:46,500
那他通常會搭配underscore 或jquery去做操作

69
00:03:46,500 --> 00:03:50,160
那我們這邊實際來看一下

70
00:03:50,160 --> 00:03:51,240
甚麼是data binding

71
00:03:51,240 --> 00:03:54,520
這樣因為我們這邊也是拿x軸跟y軸啦

72
00:03:54,520 --> 00:03:57,100
那大家可能會覺得有點抽象

73
00:03:57,100 --> 00:04:01,840
我們這邊用比較簡單的是angular 1來去講這件事情好了

74
00:04:01,840 --> 00:04:02,300
就是說

75
00:04:02,300 --> 00:04:07,140
這個是angular的1.x的一個範例

76
00:04:07,140 --> 00:04:09,140
這是他的官網

77
00:04:09,140 --> 00:04:10,340
事實上就是說

78
00:04:10,340 --> 00:04:12,340
使用angular的時候angular 1.x

79
00:04:12,340 --> 00:04:16,720
這邊你要去有放一個叫directive

80
00:04:16,720 --> 00:04:18,720
就是說他一個關鍵字

81
00:04:18,720 --> 00:04:19,400
叫ng-app

82
00:04:19,400 --> 00:04:21,400
那這邊ng-app的範圍裏面

83
00:04:21,400 --> 00:04:23,000
因為html是成對出現

84
00:04:23,000 --> 00:04:23,960
在這包裹裡面的話

85
00:04:23,960 --> 00:04:26,300
就知道是angular的一個application

86
00:04:26,300 --> 00:04:28,300
那裏面引入了angular

87
00:04:28,300 --> 00:04:29,580
在scrit這邊

88
00:04:29,580 --> 00:04:31,580
然後這邊就是在input這邊

89
00:04:31,580 --> 00:04:34,300
綁定了一個model叫ng-model

90
00:04:34,300 --> 00:04:37,080
那這邊的話你會發現說我在這邊

91
00:04:37,740 --> 00:04:38,940
會發現好神奇噢 就是說

92
00:04:38,940 --> 00:04:40,440
我在這邊input打

93
00:04:40,440 --> 00:04:42,440
這邊就出現字了

94
00:04:42,440 --> 00:04:44,440
有發現嗎 就是說

95
00:04:44,440 --> 00:04:49,140
我在這邊打 就是 打angular

96
00:04:49,140 --> 00:04:50,140
這邊就出現了

97
00:04:50,140 --> 00:04:52,560
因為在這邊就是有一個動態的一個

98
00:04:52,560 --> 00:04:55,940
恩…就是我們這邊就是綁定了data binding

99
00:04:55,940 --> 00:04:58,920
綁定了這個yourname這個model

100
00:04:58,920 --> 00:04:59,960
也就是說呢

101
00:04:59,960 --> 00:05:01,960
這個是自動幫你雙向綁定

102
00:05:01,960 --> 00:05:03,960
我這個我當這個input model

103
00:05:03,960 --> 00:05:05,360
綁定住了yourname

104
00:05:05,360 --> 00:05:09,460
我這邊的這個value

105
00:05:09,460 --> 00:05:13,140
也會因為這個automatic自動的去update他

106
00:05:14,460 --> 00:05:18,240
這個就是angular的自動的data binding

107
00:05:19,200 --> 00:05:20,480
這個大家可以感受一下

108
00:05:20,480 --> 00:05:22,480
大概是這樣子的狀況啦

109
00:05:22,480 --> 00:05:25,720
那在這個react這邊

110
00:05:25,720 --> 00:05:27,320
他事實上就沒有

111
00:05:27,320 --> 00:05:29,940
動態的綁定的一個機制

112
00:05:31,020 --> 00:05:33,500
那…相對於

113
00:05:33,500 --> 00:05:36,540
大而全的框架跟就是完整的框架

114
00:05:36,540 --> 00:05:38,200
事實上angular裡面

115
00:05:38,200 --> 00:05:40,200
綁了很多的api

116
00:05:40,200 --> 00:05:42,980
幫你做了很多事情啦

117
00:05:42,980 --> 00:05:46,100
所以說如果說你不希望

118
00:05:46,100 --> 00:05:49,240
那麼多的一個綁定 或是說

119
00:05:49,240 --> 00:05:50,660
幫你做了很多事情

120
00:05:50,920 --> 00:05:52,360
你可以選擇像是vue

121
00:05:52,440 --> 00:05:55,500
相對於angular也是自動綁定

122
00:05:55,500 --> 00:05:58,000
他相對簡潔更輕量

123
00:05:59,400 --> 00:06:00,700
那react的話

124
00:06:00,700 --> 00:06:02,700
react他好處在於說

125
00:06:02,700 --> 00:06:04,700
他focus在於說

126
00:06:04,700 --> 00:06:06,700
他的component的一些撰寫

127
00:06:06,880 --> 00:06:10,480
跟他的跨平台的一個優勢這樣子

128
00:06:10,480 --> 00:06:13,340
那他的 核心理念就是希望就是

129
00:06:14,100 --> 00:06:15,880
learn once write everywhere

130
00:06:15,880 --> 00:06:17,880
等一下我們會去講到

131
00:06:17,880 --> 00:06:21,120
那這個mvc mvp mvvm這個觀念

132
00:06:21,120 --> 00:06:23,320
大家可以參考這篇文章

133
00:06:23,840 --> 00:06:26,200
我覺得他講得蠻清楚的在於說

134
00:06:28,200 --> 00:06:30,020
大家很多在講說

135
00:06:30,020 --> 00:06:33,300
甚麼是mvc框架mvvm的框架

136
00:06:33,300 --> 00:06:34,740
透過這樣的機制

137
00:06:34,740 --> 00:06:36,740
可以去用圖解的

138
00:06:36,740 --> 00:06:38,740
阮一峰老師他寫的還蠻清楚的

139
00:06:38,740 --> 00:06:40,740
就是說在於

140
00:06:40,740 --> 00:06:43,480
以前端的mvc來講的話

141
00:06:44,460 --> 00:06:46,660
事實上我們可以來看就是說

142
00:06:48,120 --> 00:06:49,980
通常mvc會有兩種情況

143
00:06:49,980 --> 00:06:53,800
一種就是你直接跟使用者介面互動之後

144
00:06:53,800 --> 00:06:56,580
透過controller去跟資料層互動

145
00:06:56,960 --> 00:06:59,680
然後在資料層改變之後

146
00:06:59,680 --> 00:07:01,680
再去改變你的使用者介面

147
00:07:01,680 --> 00:07:04,160
那這個是mvc的可能一種方式

148
00:07:04,160 --> 00:07:06,160
另一種就是

149
00:07:06,160 --> 00:07:10,360
透過controller 這個業務邏輯的部分

150
00:07:10,360 --> 00:07:12,360
去改動資料層的部分

151
00:07:12,360 --> 00:07:15,080
那資料層再去反映到使用者介面

152
00:07:15,080 --> 00:07:16,200
這是另外一種

153
00:07:16,200 --> 00:07:18,680
那比較常見是backbone.js

154
00:07:19,020 --> 00:07:22,560
backbone.js的話事實上不能叫mvc

155
00:07:22,560 --> 00:07:26,860
因為他controller的部分非常小 比較像是router的部分

156
00:07:26,860 --> 00:07:30,320
router的話是根據url的變化去做

157
00:07:32,320 --> 00:07:35,520
適當的一個操作跟調整這樣子

158
00:07:35,520 --> 00:07:37,520
那這邊就來看說就是

159
00:07:37,520 --> 00:07:39,520
使用者view的部分

160
00:07:39,520 --> 00:07:43,520
就是使用者介面 你可能就是dom的操作之類的

161
00:07:44,700 --> 00:07:46,140
去改動到model

162
00:07:46,140 --> 00:07:48,620
那也可以透過就是轉換頁面

163
00:07:48,620 --> 00:07:51,020
可能就是轉換頁面的時候

164
00:07:51,020 --> 00:07:53,520
你的rout會改變 然後再去改變model

165
00:07:53,520 --> 00:07:55,520
然後再去改變view

166
00:07:55,780 --> 00:07:57,960
那這個的話就是說

167
00:07:57,960 --> 00:08:00,500
這邊也有提到就是說 controller非常薄

168
00:08:00,500 --> 00:08:06,400
只有在就是router作用就是改變url的作用

169
00:08:06,400 --> 00:08:08,400
這是backbone.js


170
00:08:08,400 --> 00:08:10,960
大家如果有興趣 可以去研究backbone.js


171
00:08:10,960 --> 00:08:12,960
那這個算是比較早期

172
00:08:12,960 --> 00:08:14,960
的一個javascript的一個framework

173
00:08:15,300 --> 00:08:20,300
通常會搭配underscore和jquery

174
00:08:20,300 --> 00:08:22,300
去做一些操作

175
00:08:22,300 --> 00:08:25,940
算是始祖的javascript的一個framework

176
00:08:25,940 --> 00:08:27,940
因為他相對輕量

177
00:08:29,940 --> 00:08:33,760
可以看到是說他壓縮版本 事實上就只有7.6kb

178
00:08:33,760 --> 00:08:34,600
非常小

179
00:08:34,600 --> 00:08:36,600
所以說有些的一些

180
00:08:36,600 --> 00:08:38,600
prevention的應用程式

181
00:08:38,600 --> 00:08:42,920
也會採用backbone.js去做使用這樣子

182
00:08:42,920 --> 00:08:46,400
那…另外一種就是mvvm

183
00:08:46,400 --> 00:08:48,680
mvvm事實上他有一個new model

184
00:08:49,900 --> 00:08:53,180
他比較大的一個

185
00:08:53,180 --> 00:08:55,180
跟mvp 還有一個叫mvp

186
00:08:55,180 --> 00:08:58,100
他把controller改成presenter

187
00:08:58,100 --> 00:09:00,760
改變了一個通信方式就是說

188
00:09:00,760 --> 00:09:04,760
view要操作到model的時候

189
00:09:04,760 --> 00:09:07,680
跟資料層互動的時候 事實上有個presenter在這邊

190
00:09:08,460 --> 00:09:11,540
所以view不會直接跟model有直接關係

191
00:09:11,540 --> 00:09:12,820
所以說他通常是

192
00:09:12,820 --> 00:09:16,260
透過presenter這一個去跟model互動

193
00:09:17,840 --> 00:09:21,480
那大部分業務邏輯的部分都是放在presenter

194
00:09:22,440 --> 00:09:23,480
那mvvm事實上

195
00:09:23,480 --> 00:09:25,900
最明顯的例子是angular跟ember

196
00:09:25,900 --> 00:09:27,380
那是甚麼呢

197
00:09:27,380 --> 00:09:31,360
就是說你view跟viewmodel跟model互動

198
00:09:31,360 --> 00:09:33,680
那他是data雙向綁定

199
00:09:33,680 --> 00:09:35,680
就是說 我們剛剛在講過啦

200
00:09:35,680 --> 00:09:36,980
雙向的綁定

201
00:09:36,980 --> 00:09:38,980
就是說我這邊綁定了之後

202
00:09:38,980 --> 00:09:43,560
你事實上可以就是根據你這個model的轉變去

203
00:09:43,560 --> 00:09:46,960
自動地去更新你的value的一個值這樣子

204
00:09:47,440 --> 00:09:50,220
這個是大致上的一個介紹啦

205
00:09:50,220 --> 00:09:52,720
那因為我們這邊主要是概論啦

206
00:09:52,720 --> 00:09:56,600
那大家事實上要實際地去操作才會比較容易體會

207
00:09:56,780 --> 00:09:58,640
那接下來我們講一下reactjs

208
00:09:58,640 --> 00:10:01,360
那reactjs在官網事實上就有定義

209
00:10:01,360 --> 00:10:03,360
他是一個javascript的一個library

210
00:10:03,360 --> 00:10:04,240
就是函式庫

211
00:10:04,240 --> 00:10:08,380
是為了就是要建造user的interfaces 就是說

212
00:10:08,380 --> 00:10:10,380
使用者的一個介面

213
00:10:11,160 --> 00:10:15,120
那react他本身早期是在他內部的一個facebook

214
00:10:15,520 --> 00:10:18,120
所開發的應用去使用到

215
00:10:18,120 --> 00:10:19,140
那後來呢

216
00:10:19,140 --> 00:10:22,440
因為facebook覺得他使用上非常的良好

217
00:10:22,440 --> 00:10:24,940
希望多跟開源社群有

218
00:10:24,940 --> 00:10:27,060
更多的一些交流

219
00:10:27,060 --> 00:10:29,940
那後來就在

220
00:10:29,940 --> 00:10:31,940
2013年的時候就是

221
00:10:31,940 --> 00:10:35,960
開源這個react的他的一個程式碼

222
00:10:35,960 --> 00:10:39,240
那在開源之後事實上有各種的一個

223
00:10:39,740 --> 00:10:43,820
不管是 component的開發也好

224
00:10:43,820 --> 00:10:45,820
或者是說各種的工具也好

225
00:10:45,820 --> 00:10:47,820
也都雨後春筍般出現

226
00:10:47,820 --> 00:10:51,740
造成現在蓬勃的生態性的發展

227
00:10:51,740 --> 00:10:55,280
事實上就是react的小檔案

228
00:10:55,280 --> 00:10:58,300
大家可以參考一下 那他主要是由facebook所推出

229
00:10:58,820 --> 00:11:01,200
那現在主要是open source

230
00:11:01,200 --> 00:11:03,920
讓大家可以去參與開發跟維護的

231
00:11:05,660 --> 00:11:09,280
主要是javascript的一個函式庫 主要是專注在view的部分

232
00:11:09,840 --> 00:11:14,560
他有幾個特色主要就是他讓component這個開發

233
00:11:14,560 --> 00:11:16,560
非常的容易

234
00:11:16,560 --> 00:11:19,660
有人說事實上元件化這件事情

235
00:11:19,660 --> 00:11:22,880
事實上是在前端開發的一個

236
00:11:22,880 --> 00:11:24,880
蠻重要的聖杯啦

237
00:11:25,100 --> 00:11:31,120
我們過去寫html跟css、javascript很難的去重複使用

238
00:11:31,120 --> 00:11:34,860
不管你使用templete也好或是說

239
00:11:34,860 --> 00:11:37,800
angular他的directive

240
00:11:37,800 --> 00:11:40,580
1.x的directive寫法

241
00:11:40,580 --> 00:11:42,580
他在寫component事實上都非常麻煩

242
00:11:42,580 --> 00:11:46,660
那reactjs的一個component的一個非常簡潔

243
00:11:46,660 --> 00:11:50,700
跟他的api的使用事實上讓component的開發非常容易

244
00:11:50,700 --> 00:11:53,100
所以說 reuse你的code

245
00:11:53,440 --> 00:11:56,120
在前端變成有可能

246
00:11:56,120 --> 00:11:58,120
那另外就是virtual dom

247
00:11:58,120 --> 00:12:00,120
virtual dom的實踐在於說

248
00:12:00,120 --> 00:12:03,920
因為dom的操作成本是非常龐大的

249
00:12:03,920 --> 00:12:04,920
也就是說

250
00:12:04,920 --> 00:12:09,660
我們在前端的效能提升往往受限於在操作dom的時候

251
00:12:10,740 --> 00:12:12,260
效能會變的不彰

252
00:12:12,380 --> 00:12:18,640
那virtual dom他讓這個他有一個虛擬的dom的操作

253
00:12:18,640 --> 00:12:21,740
那他會去mapping dom 真實的dom

254
00:12:21,740 --> 00:12:23,400
他會去比對說怎麼樣

255
00:12:23,400 --> 00:12:26,380
可以最小的去操作到實際的dom

256
00:12:26,380 --> 00:12:31,260
那可以讓整個效能可以更加的提升這樣子

257
00:12:32,440 --> 00:12:37,900
那另外一個他還蠻大的願景就是learn once write everywhere

258
00:12:37,900 --> 00:12:44,600
透過你能理解react核心的api跟他的生命週期的話

259
00:12:44,600 --> 00:12:48,780
你事實上就是 你要轉換到就是react native

260
00:12:48,780 --> 00:12:53,760
去開發native的application或是說react vr去開發vr的application

261
00:12:53,920 --> 00:12:58,620
甚至有更多其他的平台可以去做開發這樣子

262
00:12:59,820 --> 00:13:04,280
我們首先來介紹react蠻核心觀念 就叫react component

263
00:13:04,280 --> 00:13:11,080
在react世界裡事實上所有的一個元素都可以視為component

264
00:13:11,080 --> 00:13:12,980
那我們可以看到是說

265
00:13:12,980 --> 00:13:16,220
這個是一個通訊錄的表單

266
00:13:16,220 --> 00:13:18,680
大家可以看到這是一個員工通訊錄

267
00:13:18,680 --> 00:13:20,680
我們可以看到就是說

268
00:13:20,680 --> 00:13:23,780
事實上這個一個一個都是一個component

269
00:13:23,780 --> 00:13:25,460
有看到嗎 就是說

270
00:13:25,460 --> 00:13:27,460
這上面是一個homepage component

271
00:13:27,460 --> 00:13:31,780
那這個employeepage的component

272
00:13:31,780 --> 00:13:33,780
那這個是header component

273
00:13:33,780 --> 00:13:38,480
那這裡最大的一個就是外面是一個app的component

274
00:13:38,480 --> 00:13:41,500
那裡面有employeelist component

275
00:13:41,500 --> 00:13:44,560
然後employeelistitem的component

276
00:13:44,560 --> 00:13:46,020
一個一個的list

277
00:13:46,020 --> 00:13:50,060
有ceo啊 vp cfo等等等等之類的

278
00:13:50,060 --> 00:13:52,460
那他還有一個search bar component

279
00:13:52,460 --> 00:13:54,460
你會發現說

280
00:13:55,420 --> 00:13:57,780
一開始你可以就是

281
00:13:58,360 --> 00:14:02,380
慢慢地去訓練自己去解構畫面

282
00:14:02,380 --> 00:14:06,280
就是說你怎麼把這畫面變成一個個component呢

283
00:14:06,280 --> 00:14:09,420
大家如果覺得沒感覺那

284
00:14:09,420 --> 00:14:12,060
可能就是可以去慢慢練習啦

285
00:14:12,060 --> 00:14:14,060
就是說像yahoo

286
00:14:14,060 --> 00:14:17,320
yahoo奇摩的首頁

287
00:14:17,320 --> 00:14:19,320
你也可以去練習說

288
00:14:19,320 --> 00:14:21,320
這可能是一個component

289
00:14:21,320 --> 00:14:26,320
這個是一個component最大的也是component application

290
00:14:26,320 --> 00:14:28,780
這個可能是一個一個component

291
00:14:28,780 --> 00:14:30,780
一個一個component

292
00:14:30,780 --> 00:14:33,380
那這樣的話你就是 隨著你練習

293
00:14:33,380 --> 00:14:36,600
去看一個畫面的時候把他切割成

294
00:14:36,600 --> 00:14:39,160
怎樣把他切成一個一個component的時候

295
00:14:39,160 --> 00:14:41,160
你到一定的程度的訓練之後

296
00:14:41,160 --> 00:14:43,160
你的天眼就會打開了

297
00:14:43,160 --> 00:14:45,160
天眼打開那就是說

298
00:14:45,160 --> 00:14:47,620
你看到一個頁面過來的時候

299
00:14:47,620 --> 00:14:49,620
你就會把他切成一個一個component

300
00:14:49,620 --> 00:14:52,480
那你就知道怎麼樣去規劃你的component

301
00:14:54,260 --> 00:14:56,020
那這個要特別注意就是說

302
00:14:56,020 --> 00:14:58,020
事實上在react 你會感覺就是

303
00:14:58,020 --> 00:15:00,020
寫程式就像是在堆積木一樣

304
00:15:00,020 --> 00:15:03,700
你把他一層一個個component把他切出來之後

305
00:15:03,700 --> 00:15:08,820
那你要做一個application就好像把積木組裝起來

306
00:15:08,820 --> 00:15:10,820
就成一個application

307
00:15:10,820 --> 00:15:12,820
接下來我們來介紹jsx

308
00:15:12,820 --> 00:15:17,700
jsx事實上是一種語法糖

309
00:15:17,700 --> 00:15:19,300
他不是一種全新語法

310
00:15:19,300 --> 00:15:24,340
他是類似於xml的一種ecmascript語法擴充

311
00:15:26,340 --> 00:15:28,980
他事實上提供了幾點的優點

312
00:15:28,980 --> 00:15:30,980
包括就是更佳語意化

313
00:15:30,980 --> 00:15:32,980
更容易懂的標籤 更加簡潔

314
00:15:32,980 --> 00:15:34,980
整個javascript的語法

315
00:15:34,980 --> 00:15:37,460
讓你在撰寫component的時候更方便

316
00:15:37,460 --> 00:15:39,460
這樣講好像有點抽象

317
00:15:39,460 --> 00:15:41,460
這個邊事實上有一篇文章

318
00:15:41,460 --> 00:15:46,460
算是整理蠻完整的jsx介紹

319
00:15:46,460 --> 00:15:51,140
jsx的話事實上在你撰寫 react component的時候

320
00:15:51,140 --> 00:15:53,560
你可以選擇用或者選擇不用

321
00:15:53,560 --> 00:15:56,500
那通常的話你寫久了之後

322
00:15:56,500 --> 00:16:00,220
你事實上如果你都沒有用jsx的話你會非常辛苦

323
00:16:00,220 --> 00:16:02,220
所以通常的話比較建議

324
00:16:02,220 --> 00:16:06,380
就是用搭配jsx去撰寫你的component這樣子

325
00:16:07,120 --> 00:16:11,740
那他react事實上在

326
00:16:12,380 --> 00:16:15,580
寫component觀念跟angular事實上思維是不太一樣

327
00:16:15,580 --> 00:16:18,940
angular他主要的話主要希望強化html

328
00:16:20,480 --> 00:16:22,180
所謂的enhance html

329
00:16:22,180 --> 00:16:23,180
那react不一樣

330
00:16:23,180 --> 00:16:29,180
react的核心主要還是希望能夠把javascript原生的一些

331
00:16:29,180 --> 00:16:33,660
function或者說他的一些功能把他釋放出來

332
00:16:33,660 --> 00:16:38,200
也就是說他放棄了一個templete base的一種寫法

333
00:16:39,060 --> 00:16:43,220
那剛提到了是說

334
00:16:43,560 --> 00:16:46,260
怎麼樣更加語意化html標籤

335
00:16:46,260 --> 00:16:49,440
我們事實上拿這個範例來看就是說我們一般在寫一個算是

336
00:16:52,700 --> 00:16:54,460
記錄一個表單 我們通常會這樣寫

337
00:16:54,460 --> 00:16:57,320
一個form 一個text area 一個bottom submit

338
00:16:57,620 --> 00:17:03,380
那如果說使用jsx的話他就可以像xml一樣去定義自己的語法標籤

339
00:17:03,380 --> 00:17:05,380
那有開始和關閉 你看

340
00:17:05,800 --> 00:17:08,620
我們這個messagebox等於這樣

341
00:17:08,620 --> 00:17:11,220
這樣是不是非常清楚 就是你一眼看過去

342
00:17:11,220 --> 00:17:14,500
我知道這個是一個訊息的box

343
00:17:14,500 --> 00:17:16,500
這邊你看了半天

344
00:17:16,500 --> 00:17:18,500
你可能還是不知道說

345
00:17:18,500 --> 00:17:21,280
如果說不是寫

346
00:17:21,280 --> 00:17:23,740
html比較熟悉的人 他可能不知道

347
00:17:23,740 --> 00:17:27,300
可是這個一看 一般的人都看的懂這是一個

348
00:17:27,300 --> 00:17:29,300
可能是一個messagebox

349
00:17:29,300 --> 00:17:33,140
用jsx還有一個蠻大的好處就是說

350
00:17:33,140 --> 00:17:36,160
他可以實現declarative的寫法

351
00:17:36,160 --> 00:17:38,160
而不是imperative的寫法

352
00:17:38,160 --> 00:17:40,160
差異在哪邊呢

353
00:17:40,160 --> 00:17:43,260
這邊的話我們以facebook來講的話

354
00:17:43,260 --> 00:17:45,120
我們點讚跟沒有點讚

355
00:17:45,120 --> 00:17:48,840
事實上他的一個state狀態會不一樣

356
00:17:48,840 --> 00:17:52,840
一個是點讚就liked 然後打勾然後反灰這樣子

357
00:17:52,840 --> 00:17:56,840
那沒有點讚就是深藍色狀況

358
00:17:56,840 --> 00:18:00,840
那這邊也可以判斷說如果說

359
00:18:00,840 --> 00:18:05,940
使用者已經有沒有就是bluelike

360
00:18:05,940 --> 00:18:11,460
或者說是true的話 那我們就把graylike把

361
00:18:11,460 --> 00:18:14,460
因為這邊是驚嘆號是相反

362
00:18:14,460 --> 00:18:18,460
所以說他是bluelike然後是true

363
00:18:18,460 --> 00:18:23,280
那我們事實上這邊就會變成false 所以就會變到這邊來

364
00:18:24,080 --> 00:18:26,020
我們這邊事實上

365
00:18:26,020 --> 00:18:30,420
就是會把bluelike 把他移除掉然後變成graylike

366
00:18:30,420 --> 00:18:35,340
也就是說呢就是原本bluelike就會變成graylike

367
00:18:35,340 --> 00:18:39,340
那這樣的話感覺就會非常的繁瑣 不直覺

368
00:18:39,920 --> 00:18:45,700
那如果說我們變成這樣呢 如果說這個state是已經是喜歡

369
00:18:45,700 --> 00:18:50,500
已經是true的話 那我們就回傳一個bluelike的一個button

370
00:18:50,500 --> 00:18:53,780
那如果說不是喜歡的話就是graylike

371
00:18:53,780 --> 00:18:55,660
非常直覺

372
00:18:55,660 --> 00:18:57,640
對呀就是這個state

373
00:18:58,940 --> 00:19:01,200
狀態就是說到底有沒有喜歡

374
00:19:01,200 --> 00:19:04,420
如果喜歡就變灰色然後打勾

375
00:19:04,420 --> 00:19:08,420
如果沒有喜歡就是藍色

376
00:19:08,420 --> 00:19:14,360
非常簡潔易懂 那這個就達到第一個更加語意化易懂的標籤就是jsx

377
00:19:14,360 --> 00:19:17,420
那react通常會搭配jsx

378
00:19:17,420 --> 00:19:21,420
去撰寫component去達到這樣的好處

379
00:19:21,420 --> 00:19:23,440
那另外一種是更加簡潔

380
00:19:23,440 --> 00:19:25,380
就是說jsx最終會

381
00:19:25,380 --> 00:19:26,480
因為他是一個語法糖

382
00:19:26,480 --> 00:19:28,320
他最終會轉換成javascript

383
00:19:28,320 --> 00:19:31,600
那如果說你不使用jsx去寫

384
00:19:31,600 --> 00:19:33,340
你要去產生component

385
00:19:33,340 --> 00:19:38,280
你就沒辦法在component裡面去寫這樣類似html的寫法

386
00:19:38,280 --> 00:19:41,180
那你需要的寫法就是要寫成這樣

387
00:19:41,180 --> 00:19:44,760
react.createelement('a',) 然後把attribute丟進去

388
00:19:44,760 --> 00:19:46,880
然後這是裡面的值 有沒有看到

389
00:19:46,880 --> 00:19:49,680
就如果你不用jsx的話你就要這樣寫

390
00:19:49,680 --> 00:19:51,680
那如果用jsx的話就可以這樣寫

391
00:19:52,520 --> 00:19:55,340
我們講說jsx是選用的啦

392
00:19:55,340 --> 00:19:56,540
你也可以不用寫

393
00:19:57,000 --> 00:20:01,860
那另外一件事情就是說 jsx事實上釋放了javascript的能量

394
00:20:02,780 --> 00:20:05,860
你事實上在這個component裡面 看到這邊

395
00:20:05,860 --> 00:20:10,220
有一個叫lists 裡面存了4個元素的array

396
00:20:10,220 --> 00:20:12,120
那我們在這邊lists.map

397
00:20:12,120 --> 00:20:17,120
map是iterate array 把裡面的元素值一個一個把他倒出來

398
00:20:17,120 --> 00:20:21,120
那我這邊就可以用透過這樣刮號

399
00:20:21,120 --> 00:20:27,420
去把就是javascript的一個能量把他釋放出來

400
00:20:27,420 --> 00:20:29,900
就可以javascript的一個iterate array的寫法

401
00:20:29,900 --> 00:20:33,600
把他裡面的元素倒出來

402
00:20:33,600 --> 00:20:36,840
這樣的話就是一個unordered list

403
00:20:36,840 --> 00:20:38,840
然後裡面有4個item

404
00:20:39,800 --> 00:20:42,600
這樣大家有感受到嗎 這邊有ul li

405
00:20:42,600 --> 00:20:44,800
然後透過lists去iterate

406
00:20:44,800 --> 00:20:49,160
這樣的話就可以用原生的javascript去寫裡面的component內容

407
00:20:49,160 --> 00:20:52,440
就會讓你開發起來更順暢這樣子

408
00:20:52,440 --> 00:20:55,740
那下面還有一些javascript的一些用法啦

409
00:20:55,740 --> 00:21:01,280
我們這邊就 因為時間關係我們就不完全的講完

410
00:21:01,280 --> 00:21:05,280
大家事實上可以參考這篇文章 事實上就還算蠻清楚的

411
00:21:06,480 --> 00:21:11,420
接下來我們要就是繼續往下走去探討另外一個議題

412
00:21:11,420 --> 00:21:13,800
叫就做react virtual dom

413
00:21:13,800 --> 00:21:19,200
那react virtual dom事實上就是一個蠻簡單的一個觀念

414
00:21:19,200 --> 00:21:23,200
事實上他有一個黑盒子 你在操作react dom的時候

415
00:21:23,200 --> 00:21:27,200
一般來講你操作的是virtual dom 就是虛擬的dom

416
00:21:27,200 --> 00:21:32,160
那這個虛擬的dom 會去跟實際上的dom去做比對

417
00:21:32,160 --> 00:21:36,160
去想辦法最少的操作dom

418
00:21:36,160 --> 00:21:42,100
那為什麼要這樣呢 因為我們講過就是說在browser裡面操作dom的成本是非常高的

419
00:21:42,100 --> 00:21:47,460
相對比較高 那我們如果說能夠降低就是

420
00:21:47,460 --> 00:21:52,000
在操作dom的上面的步驟或者是

421
00:21:52,000 --> 00:21:56,000
的次數的話 事實上就有機會提升他整體的效能

422
00:21:56,000 --> 00:22:00,000
那這個就是virtual dom 那他裡面內建了一個機制

423
00:22:00,000 --> 00:22:04,000
那react lifecycle

424
00:22:04,000 --> 00:22:08,000
事實上react的component有一個react lifecycle有一個生命週期

425
00:22:08,000 --> 00:22:12,640
就像人有生老病死 component元件也有生命週期

426
00:22:12,640 --> 00:22:17,980
那他生命週期就是在於他api的一個使用

427
00:22:17,980 --> 00:22:21,500
一開始initial的時候first render 就是initial的時候

428
00:22:21,500 --> 00:22:25,780
他會按照這個步驟去觸發他的一個api

429
00:22:25,780 --> 00:22:30,120
包括就是你可以用getdefaultprops去把屬性值取出來

430
00:22:30,120 --> 00:22:33,580
getinitialstate去把innitialstate取出來

431
00:22:33,580 --> 00:22:39,060
然後componentwillmount component準備要插進去

432
00:22:39,060 --> 00:22:42,260
這個mount是插入的意思

433
00:22:42,260 --> 00:22:48,920
那render的話是渲染 那componentdidmount實際上已經成功

434
00:22:49,220 --> 00:22:52,640
把你的component插入你那個dom的地方

435
00:22:52,920 --> 00:22:55,840
那通常我們要去做一些非同步的處理

436
00:22:55,840 --> 00:22:56,100
ajax的話 通常會在這個地方
那通常我們要去做一些非同步的處理

437
00:22:56,100 --> 00:22:58,780
ajax的話 通常會在這個地方

438
00:22:58,780 --> 00:23:02,780
我們這邊的話 我們可以來這邊看一下

439
00:23:02,780 --> 00:23:07,720
聽起來好像還是有點抽象 那我們這邊來用一個簡單的react範例來說明

440
00:23:07,720 --> 00:23:14,240
react component 的生命週期 我們這邊事實上用了一個cdn的方式

441
00:23:14,300 --> 00:23:18,660
我們去引入 就是從遠端去引入了javascript

442
00:23:18,820 --> 00:23:22,680
react script進來react和react dom

443
00:23:23,260 --> 00:23:25,580
這個minimum是把他壓縮過後的

444
00:23:25,580 --> 00:23:29,580
就是說這主要是核心的庫就是有這兩個

445
00:23:29,580 --> 00:23:33,160
我們這邊在div和id app這樣子

446
00:23:33,160 --> 00:23:37,320
我們這邊就來建造 我們先把他拿掉 專注在這邊

447
00:23:37,320 --> 00:23:41,320
我們建造一個component 這是es6的寫法啦

448
00:23:41,320 --> 00:23:45,820
網路上可能還有一些就是es5的寫法 是這樣子

449
00:23:45,820 --> 00:23:50,520
react.createclass然後 裡面寫一些東西

450
00:23:50,520 --> 00:23:53,880
那我們這邊都統一用es6的寫法啦

451
00:23:53,880 --> 00:23:58,700
未來也是這樣的一個趨勢 那我們這邊事實上有一個constructor

452
00:23:58,700 --> 00:24:03,640
constructor就是說當你就是 在建造這個component的時候

453
00:24:03,640 --> 00:24:08,220
會去執行的一個方法

454
00:24:08,220 --> 00:24:11,820
那他基本上就是我們這邊是繼承了react component

455
00:24:11,820 --> 00:24:16,600
所以這個 props傳進來是從這邊傳進來

456
00:24:17,660 --> 00:24:20,600
這個props是他的參數啦

457
00:24:20,600 --> 00:24:25,620
那這個super是去呼叫 繼承的parent的

458
00:24:27,920 --> 00:24:29,620
去建構這樣子

459
00:24:29,620 --> 00:24:33,620
他的constructor 那我們這邊先不管這邊

460
00:24:33,620 --> 00:24:40,880
那我們可以看到說 這個待會再講好了

461
00:24:40,880 --> 00:24:44,460
我們回頭來看這個lifecycle

462
00:24:44,460 --> 00:24:50,440
事實上這個第一次render這個component 第一次去產生這個component的時候

463
00:24:50,440 --> 00:24:53,700
會去照這樣的一個流程執行啦

464
00:24:53,700 --> 00:24:58,800
但在es6裡面這兩個事實上是去用其他的方式去做呈現的

465
00:24:58,800 --> 00:25:02,800
那我們等一下可以看到 先willmount

466
00:25:02,800 --> 00:25:08,080
就是說即將 will是即將的意思

467
00:25:08,080 --> 00:25:13,960
那render就已經渲染 那did是現在完成式已經完成了

468
00:25:13,960 --> 00:25:15,980
我們可以從這邊看到

469
00:25:18,140 --> 00:25:21,020
有看到嗎就是說 我刻意在裡面做consolelog

470
00:25:21,020 --> 00:25:26,840
就是一開始執行constructor 然後再來componentwillmount

471
00:25:27,240 --> 00:25:30,040
然後render

472
00:25:30,040 --> 00:25:33,660
然後componentdidmount 有看到嗎 就是照這這樣的順序

473
00:25:33,660 --> 00:25:37,660
生命週期是照這樣的順序去執行的 那我們output

474
00:25:37,660 --> 00:25:41,180
這邊有一個hi, mark

475
00:25:41,180 --> 00:25:45,180
我這邊事實上做了一件事情 就是

476
00:25:45,180 --> 00:25:49,600
hi, mark hi, mark是在哪來的呢 在render這一個

477
00:25:49,600 --> 00:25:53,240
渲染的一個方法裡面 我這邊return

478
00:25:53,240 --> 00:25:58,000
return這個div 就是說我這個component 事實上是這個div啦

479
00:25:58,000 --> 00:26:01,000
那我們這邊綁定了一個事件 叫onclick

480
00:26:01,000 --> 00:26:05,000
那this是指這個component handleclick

481
00:26:05,000 --> 00:26:09,000
就是說當使用者點擊的時候 會變成zuck了

482
00:26:09,000 --> 00:26:12,160
我這邊做了一件事情 就是說 handleclick的時候

483
00:26:12,160 --> 00:26:15,720
會去用這個事件處理 那我這邊this.setstate


484
00:26:15,720 --> 00:26:20,800
setstate意思還 蠻重要就是說事實上component裡面有state

485
00:26:20,800 --> 00:26:23,840
就是狀態的管理 那他是可以去改變的

486
00:26:23,840 --> 00:26:28,440
那props的話property 他主要就是用

487
00:26:28,440 --> 00:26:33,140
傳遞的 由父元素往下傳 不會去改動到他

488
00:26:33,140 --> 00:26:37,140
唯一能改動的是state 他的狀態

489
00:26:37,140 --> 00:26:41,140
那我這邊this.state.name 就可以把name取出來

490
00:26:41,140 --> 00:26:44,620
那我們這邊原本這個state 我們在這constructor

491
00:26:44,620 --> 00:26:47,640
constructor是最initial的時候建置的

492
00:26:47,640 --> 00:26:51,640
也就是說我一開始this.state 就把name設置給mark

493
00:26:51,640 --> 00:26:55,640
所以說我一開始渲染

494
00:26:56,140 --> 00:26:58,940
渲染的這個component是hi, mark

495
00:26:59,020 --> 00:27:01,680
因為他state一開始的是給定mark

496
00:27:01,680 --> 00:27:05,080
那當我點擊的時候 handle的時候 我setstate

497
00:27:05,080 --> 00:27:08,640
我的name就變zuck 有發現嗎

498
00:27:08,640 --> 00:27:12,640
所以說我這邊印出來的時候 當state改變的時候 就會去rerender啦

499
00:27:12,640 --> 00:27:16,640
我們來看一下 順便來看一下

500
00:27:19,580 --> 00:27:20,640
我們重新來過

501
00:27:24,280 --> 00:27:26,520
就是說當你的這個

502
00:27:30,160 --> 00:27:31,840
現在是mark

503
00:27:31,840 --> 00:27:34,800
有看到現在有constructor喔

504
00:27:34,800 --> 00:27:41,100
那我這樣點 constructor沒有出現 因為construct只會在第一次的時候執行

505
00:27:41,100 --> 00:27:44,400
initialrender的時候執行 那我這個點擊的時候

506
00:27:44,540 --> 00:27:47,140
事實上做了一件事情 我state改變了

507
00:27:47,140 --> 00:27:52,200
我state改變之後 component就要rerender

508
00:27:52,200 --> 00:27:55,480
因為一定要rerender 因為我這個state改變了

509
00:27:55,480 --> 00:27:58,580
我不可能再顯示mark 我一定要顯示zuck

510
00:27:58,580 --> 00:28:02,580
因為我state改變setstate就改變state 那改變了是zuck

511
00:28:02,580 --> 00:28:06,580
所以說componentwillupdate 就說update

512
00:28:06,580 --> 00:28:10,580
改變了state 所以說我會willupdate 然後render didupdate

513
00:28:10,580 --> 00:28:14,580
這個就是一個大致上的生命週期啦

514
00:28:14,580 --> 00:28:19,960
那還有就是其他的部分 那大家再去參考額外的部分

515
00:28:19,960 --> 00:28:25,400
只要掌握這樣 大致上你對react的生命週期 已經有初步的瞭解

516
00:28:25,400 --> 00:28:29,400
接下來我們就來一個實戰的練習 那我們會使用這個

517
00:28:29,400 --> 00:28:34,160
create-react-app 這個github  repository

518
00:28:34,160 --> 00:28:38,400
那他是一個你可以想像成 如果你前幾單元有看到

519
00:28:38,400 --> 00:28:41,840
類似express generator  他類似一個鷹架

520
00:28:41,840 --> 00:28:45,840
就是c project 可以讓你就是

521
00:28:45,840 --> 00:28:49,840
快速建置react專案 那安裝方法就是這樣

522
00:28:49,840 --> 00:28:53,840
npm install –g create-react-app

523
00:28:53,840 --> 00:28:57,840
那我們來這直接安裝一下

524
00:28:57,840 --> 00:29:03,280
那如果說你要看就是我們的一個範例的話 可以在第18單元example裡面

525
00:29:03,280 --> 00:29:05,980
可以看到我們react的範例

526
00:29:09,220 --> 00:29:13,480
首先我們先在終端機這邊來安裝 creat-react-app這個工具

527
00:29:14,740 --> 00:29:16,080
安裝好了

528
00:29:16,080 --> 00:29:20,320
那我們就可以用creat-react-app這個工具去產生我們的專案檔案

529
00:29:20,320 --> 00:29:22,720
那這樣我們就可以減少很多的功夫

530
00:29:22,720 --> 00:29:28,080
那我們就叫examples1

531
00:29:29,280 --> 00:29:32,080
那他就會自動去抓取

532
00:29:32,080 --> 00:29:36,080
需要安裝的檔案 那他這邊是用yarn

533
00:29:36,080 --> 00:29:40,080
yarn是facebook自己內部的npm

534
00:29:40,080 --> 00:29:43,140
去管理這個major的工具這樣子

535
00:29:43,140 --> 00:29:45,580
那我們這邊可能就要等一下囉

536
00:29:55,840 --> 00:29:59,880
不過沒關係我們這邊 先過來看一下我們範例的程式

537
00:29:59,880 --> 00:30:03,880
我們先往下看下去 等好了我們再看

538
00:30:09,180 --> 00:30:10,300
可能要一下子

539
00:30:13,080 --> 00:30:15,900
那我們先過來看一下examples

540
00:30:15,900 --> 00:30:19,160
這個是我們自己的一個範例檔案

541
00:30:19,160 --> 00:30:23,160
你可以參考這個範例檔案去做修改

542
00:30:23,160 --> 00:30:27,160
那我們主要核心的是這個index.js

543
00:30:27,160 --> 00:30:31,160
那這個是做什麼呢 在我們這邊都是用es6的寫法啦

544
00:30:31,160 --> 00:30:36,520
可能跟你在 我們node.js那邊用require比較不一樣

545
00:30:36,520 --> 00:30:40,140
我們直接用es6 Major寫法把他import進來

546
00:30:40,140 --> 00:30:44,800
從react這邊import進來 當作react來使用

547
00:30:44,800 --> 00:30:48,800
react dom來使用 那就是

548
00:30:48,800 --> 00:30:54,540
我們這邊 react dom有一個render的方法

549
00:30:54,780 --> 00:31:00,320
render是要把他這個app

550
00:31:00,320 --> 00:31:06,500
放到這個root的地方  然後app這個component是從app.js來的

551
00:31:06,500 --> 00:31:10,500
先來看一下public

552
00:31:10,500 --> 00:31:14,900
public是在這邊 就是說是基底的一個index

553
00:31:14,900 --> 00:31:19,340
那這個root在這邊 也就是說我們的app會插進去這邊

554
00:31:19,340 --> 00:31:23,920
大家知道嗎 這個就是mount 把你的

555
00:31:23,920 --> 00:31:27,920
component把他插進去 那這個是用react dom 然後render

556
00:31:27,920 --> 00:31:32,340
前面是放你要插入的一個component 後面是要你插入在哪裡

557
00:31:41,500 --> 00:31:45,340
那我們先 來看一下那個

558
00:31:49,180 --> 00:31:51,120
好了 cool

559
00:31:51,120 --> 00:31:55,660
這邊蠻特別 他是用yarn 所以說他會有一些yarn的指令

560
00:31:55,660 --> 00:31:59,240
包含yarn start yarn run build yarn test之類

561
00:31:59,240 --> 00:32:03,300
那我們這邊來看一下examples1

562
00:32:03,300 --> 00:32:10,500
因為他是用新版 所以他是用這樣的一個作法

563
00:32:10,500 --> 00:32:14,500
不過我們事實上也可以用 npm start

564
00:32:20,180 --> 00:32:24,080
基本上是相容的

565
00:32:27,640 --> 00:32:31,480
可能要等他一下 他在啟動中

566
00:32:32,100 --> 00:32:37,060
 starting the development server 就是在啟動那個開發用的server

567
00:32:39,060 --> 00:32:40,240
那這個就是我們

568
00:32:40,240 --> 00:32:43,560
一開始initial這個 creat-react-app

569
00:32:43,560 --> 00:32:48,340
的一個sample的一個project 他大概是長這樣

570
00:32:48,340 --> 00:32:50,800
你可以打開他的原始碼

571
00:32:50,800 --> 00:32:54,800
你會看到他是在在bundle.js裡面

572
00:32:54,800 --> 00:32:58,320
是那個script啦

573
00:32:58,320 --> 00:33:02,900
那這邊就說要local sever

574
00:33:02,900 --> 00:33:06,900
那我們回頭來看我們這個

575
00:33:06,900 --> 00:33:09,800
初始化的專案 大致上就是這樣啦

576
00:33:09,800 --> 00:33:13,800
就是他因為是新版有yarn

577
00:33:13,800 --> 00:33:17,800
那他的核心是剛剛我們講的 他有一個index

578
00:33:17,800 --> 00:33:22,560
然後 這邊有一個root

579
00:33:22,560 --> 00:33:28,800
他事實上有一些機制包括就是他這邊

580
00:33:28,800 --> 00:33:34,080
事實上有用到webpack的方式

581
00:33:34,080 --> 00:33:37,560
幫你就是把script引進進來

582
00:33:37,560 --> 00:33:41,560
也就是說你react script 原本沒有在這邊的

583
00:33:41,560 --> 00:33:45,560
他用webpack的方式

584
00:33:45,560 --> 00:33:48,320
幫你打開了local sever

585
00:33:48,920 --> 00:33:51,340
那我們這邊

586
00:33:51,340 --> 00:33:55,340
事實上這個app 就是他這個

587
00:33:55,340 --> 00:33:59,340
這個這一章

588
00:33:59,340 --> 00:34:03,340
這個script 那我們再來一次好了

589
00:34:06,800 --> 00:34:10,080
那我這邊事實上 有一個叫welcome to react

590
00:34:10,080 --> 00:34:14,760
那我打react xDD 會怎麼樣

591
00:34:14,760 --> 00:34:17,860
他這邊會auto reload

592
00:34:17,860 --> 00:34:20,380
就是我當我修改他就會auto reload

593
00:34:20,380 --> 00:34:25,080
welcome to react xDD 所以我也不用重起什麼伺服器之類的

594
00:34:25,080 --> 00:34:28,280
他就會幫你自動

595
00:34:28,280 --> 00:34:33,480
當你儲存script的話他就會重新reload

596
00:34:36,500 --> 00:34:40,020
對呀 重新reload完XDD已經沒了

597
00:34:41,000 --> 00:34:43,200
那我們這邊看一下這個架構

598
00:34:43,200 --> 00:34:45,700
事實上他就是一個app的component

599
00:34:45,700 --> 00:34:51,060
大家如果還記得es6的寫法 這是一個class app 然後 extends

600
00:34:51,060 --> 00:34:55,680
繼承了component 從react去引入這個component

601
00:34:57,080 --> 00:35:02,140
那這個是es6的寫法這樣子

602
00:35:03,140 --> 00:35:06,140
那他就把component這一個

603
00:35:09,300 --> 00:35:11,200
讓他可以去繼承這樣子

604
00:35:13,060 --> 00:35:16,040
那這邊的話他

605
00:35:17,620 --> 00:35:21,860
這邊return是return component的一個內容啦

606
00:35:22,240 --> 00:35:24,880
包括他div 那注意的是

607
00:35:24,880 --> 00:35:28,880
如果你要用css的話 記得用class name 而不是class

608
00:35:28,880 --> 00:35:31,720
因為這個是javascript的保留字

609
00:35:32,180 --> 00:35:34,640
所以我們這邊是用class name


610
00:35:35,560 --> 00:35:41,220
那src logo 那logo是從這邊引入進來的

611
00:35:42,420 --> 00:35:46,720
這個是範例程式啦 那css的話就在這邊

612
00:35:46,720 --> 00:35:49,960
所以你這邊就會有app.js app.css

613
00:35:49,960 --> 00:35:53,480
事實上這就是app component 還有app.test

614
00:35:53,480 --> 00:35:57,480
就是測試 就是你看這個app component

615
00:35:57,480 --> 00:36:02,060
事實上包含了app.css app.js 跟app.test.js

616
00:36:02,060 --> 00:36:06,060
OK有看到嗎 那這個就是一個react寫法

617
00:36:06,060 --> 00:36:09,380
靜態資源放這邊 那回到我們這邊

618
00:36:09,380 --> 00:36:13,380
就是我們回過來看這邊

619
00:36:14,240 --> 00:36:16,700
我們回到我們的範例

620
00:36:22,000 --> 00:36:26,260
那我們來看一下

621
00:36:41,780 --> 00:36:44,380
他在啟動sever要等一下

622
00:36:45,320 --> 00:36:47,880
那這個主要是開發用的sever啦

623
00:37:01,980 --> 00:37:06,560
那這個是我們react的範例 是一個todo app

624
00:37:06,560 --> 00:37:07,460
hello

625
00:37:08,160 --> 00:37:08,920
yesssssss

626
00:37:10,780 --> 00:37:14,820
這樣 他是一個簡單的todo app 是用react寫的

627
00:37:18,820 --> 00:37:24,760
這邊一樣是因為他用webpack幫你就把scrpt載進來

628
00:37:26,540 --> 00:37:29,200
那我們這邊來看一下

629
00:37:29,200 --> 00:37:33,200
就是說剛才提到就是說 我們把這個app

630
00:37:33,200 --> 00:37:38,120
把component把他塞進root這邊 所以我們回來看app

631
00:37:38,120 --> 00:37:42,420
那app這邊我們事實上核心的COMPONENT還有constructor

632
00:37:42,420 --> 00:37:47,780
constructor我們這邊之前有講過 他是一個一開始初始COMPONENT

633
00:37:47,780 --> 00:37:51,240
會去呼叫的一個方法 那這邊是繼承

634
00:37:51,240 --> 00:37:55,240
那把props傳進來 super然後去呼叫

635
00:37:55,240 --> 00:37:58,300
父元素的constructor

636
00:38:00,100 --> 00:38:01,500
我這邊的話

637
00:38:01,500 --> 00:38:05,140
有一個onchange handle submit

638
00:38:05,140 --> 00:38:09,140
我這邊initial state的話是有items跟text

639
00:38:09,140 --> 00:38:13,300
等一下會講怎麼用 我們這邊先來視覺的部分來看一下

640
00:38:13,300 --> 00:38:17,300
這邊classname是container 所以我們在css這邊

641
00:38:17,300 --> 00:38:20,260
有去做一些規劃

642
00:38:20,980 --> 00:38:25,440
那這個主要是我們有用到bootstrap啦

643
00:38:25,440 --> 00:38:29,440
所以說才會有這樣用法 那這邊用了onsubmit

644
00:38:29,440 --> 00:38:34,680
去監控一個事件 當表單提交的時候 就去呼叫這個方法

645
00:38:34,680 --> 00:38:39,360
那我們這邊preventdefault 就是就預設值

646
00:38:39,360 --> 00:38:42,540
預設的行為我們不要用 這邊有一個event

647
00:38:42,540 --> 00:38:46,260
然後preventdefault就不要去執行預設行為

648
00:38:46,260 --> 00:38:52,140
那我們這邊有一件事情就是說 我們把items把他concat在一起

649
00:38:52,140 --> 00:38:55,140
這個就是們把 也可以用push

650
00:38:58,020 --> 00:39:03,280
也可以用push object的方式把他塞進去 這樣的話就會有這樣子

651
00:39:15,540 --> 00:39:16,700
一直包下去

652
00:39:18,940 --> 00:39:22,420
 那我們這邊用這樣

653
00:39:23,540 --> 00:39:26,460
 是說當你提交的時候

654
00:39:26,460 --> 00:39:29,440
會把他新增到array裡面

655
00:39:29,440 --> 00:39:31,920
這一段是這樣的意思

656
00:39:32,720 --> 00:39:39,540
會把就是你新的原來的text值 把他清空

657
00:39:39,540 --> 00:39:42,740
因為我們這個state 要每次把他清空

658
00:39:42,740 --> 00:39:46,500
因為我們所有新增的資料都會存在這邊

659
00:39:46,500 --> 00:39:50,840
但你這個暫存的資料就會把他清空

660
00:39:50,840 --> 00:39:55,440
所以我這邊setstate的話就會把nextitems把他放進去

661
00:39:55,440 --> 00:39:59,780
也就是說這個items array就會更新 變更長了

662
00:39:59,780 --> 00:40:03,780
如果有新增的話 但是text就會清空掉

663
00:40:03,780 --> 00:40:06,820
這樣我們就可以讓下一個去新增

664
00:40:06,820 --> 00:40:09,740
因為如果上一個還有值的話

665
00:40:09,740 --> 00:40:13,740
新增進來又會是跟上一個值是一樣的 要把他清空

666
00:40:14,540 --> 00:40:18,440
那我們這邊有一個form 這邊有input onchange

667
00:40:18,440 --> 00:40:22,440
onchange是幹嘛的呢 就是說當你這個input

668
00:40:22,440 --> 00:40:24,760
有輸入值的時候

669
00:40:25,920 --> 00:40:27,980
這個state就會變化了 這個text

670
00:40:27,980 --> 00:40:33,000
會從這個e.target.value 去把input的值把他取出來

671
00:40:33,940 --> 00:40:34,860
ok嗎

672
00:40:35,160 --> 00:40:36,740
我這邊

673
00:40:38,880 --> 00:40:40,740
可以改一下這樣子

674
00:40:41,460 --> 00:40:43,260
這樣可能會比較清楚

675
00:40:51,660 --> 00:40:56,600
有看到嗎 這個就是我們這個e.target.value

676
00:40:57,740 --> 00:41:01,480
就是說 當你這個input有change value的時候

677
00:41:01,480 --> 00:41:05,480
他就會去執行那個方法 那我就會setstate

678
00:41:05,480 --> 00:41:09,480
把這個text更新 那這邊就是說

679
00:41:09,480 --> 00:41:14,960
當你提交成功的時候 text把他清乾淨這樣子

680
00:41:15,720 --> 00:41:20,160
這個value是跟這個state.text連動

681
00:41:20,160 --> 00:41:23,580
我們講過在react裡面就是state可以變動

682
00:41:23,580 --> 00:41:26,520
但傳下來的props不能變動

683
00:41:27,400 --> 00:41:28,880
那我們這邊submit

684
00:41:30,700 --> 00:41:31,940
就是提交啦

685
00:41:31,940 --> 00:41:35,420
那我們這邊state.items.length + 1

686
00:41:35,420 --> 00:41:39,420
主要是說會在這邊 去解釋這個

687
00:41:39,420 --> 00:41:42,760
有沒有看到 現在要新增第幾個了

688
00:41:42,760 --> 00:41:46,760
有看到嗎 因為你這個array長度會影響到那個

689
00:41:48,980 --> 00:41:52,900
所以我們這邊同樣也可以來看一下

690
00:42:17,860 --> 00:42:22,320
有看到就是說 有一個Object新增進來 有看到嗎

691
00:42:28,360 --> 00:42:33,980
那我們這邊還有一個叫todo list的一個component

692
00:42:33,980 --> 00:42:36,840
我們講過在react application裡面

693
00:42:36,840 --> 00:42:40,480
事實上是一個個component積木組成的

694
00:42:40,480 --> 00:42:42,980
我們這邊是一個component

695
00:42:42,980 --> 00:42:47,420
這邊切比較粗啦 理論上你應改切細一點

696
00:42:47,420 --> 00:42:50,060
但我們這邊方便一點所以切比較粗

697
00:42:50,060 --> 00:42:52,920
事實上我們這邊是兩個component 這邊是一個component

698
00:42:52,920 --> 00:42:55,580
是一個todo list item的component

699
00:42:56,840 --> 00:43:00,320
那我們這邊有一個to do list 從這邊這邊有有看到

700
00:43:00,620 --> 00:43:02,160
todo list

701
00:43:05,140 --> 00:43:07,940
todo list 的一個component

702
00:43:07,940 --> 00:43:11,940
那他這個是一個functional component

703
00:43:12,200 --> 00:43:13,860
functional component是什麼意思呢

704
00:43:15,060 --> 00:43:20,400
他這邊是stateless 就是說他沒有state

705
00:43:21,520 --> 00:43:24,400
那相對於這一種寫法

706
00:43:25,720 --> 00:43:28,400
是比較省資源的

707
00:43:28,400 --> 00:43:32,400
那也單純是說他只渲染ui

708
00:43:32,400 --> 00:43:36,400
所以說在react裡面也有這個stateless component

709
00:43:37,640 --> 00:43:41,000
就是說他這邊是沒有state去管的

710
00:43:41,000 --> 00:43:46,900
他只單純去渲染ui 所以我們這邊事實上是用es6的

711
00:43:47,220 --> 00:43:51,300
arrow function的寫法 這邊把props接進來

712
00:43:52,200 --> 00:43:55,300
我這個props的items

713
00:43:55,300 --> 00:43:59,820
這邊事實上是等於這個啦 是說我們這邊

714
00:43:59,820 --> 00:44:03,820
把這個property props往下傳

715
00:44:03,820 --> 00:44:09,640
就是說 在react裡面有兩種資料源

716
00:44:09,640 --> 00:44:13,640
一個是props跟state 那props我們就往下傳

717
00:44:13,640 --> 00:44:17,920
這個items是他的屬性值 那所以this.state.items

718
00:44:17,920 --> 00:44:20,540
就會把這個array往下傳

719
00:44:21,320 --> 00:44:25,000
那在這邊我們接收到props 把他接進來

720
00:44:25,000 --> 00:44:28,120
然後items 那map大家還記得

721
00:44:28,120 --> 00:44:32,120
他就是iterate array 所以我們會把這個在裡面

722
00:44:32,120 --> 00:44:37,160
的一個array 但事實上是一個個object

723
00:44:37,160 --> 00:44:40,120
存在array裡面的object 會把他的id

724
00:44:40,120 --> 00:44:44,560
要注意就是說在react裡面 如果在你是iterate

725
00:44:44,560 --> 00:44:49,800
你的應該說 你跑迴圈去印你的

726
00:44:51,360 --> 00:44:55,140
html屬性值的時候 記得要加一個key

727
00:44:55,140 --> 00:44:58,480
不然會出問題 有點抽象

728
00:44:58,920 --> 00:45:00,620
那我們這邊就把key拿掉

729
00:45:06,220 --> 00:45:08,300
你看這邊就會亮紅字

730
00:45:08,300 --> 00:45:12,300
each child in an array or iterator should have a unique "key"

731
00:45:13,020 --> 00:45:15,860
所以就是說你在每一個

732
00:45:17,040 --> 00:45:19,860
iterate的部分你就要

733
00:45:19,860 --> 00:45:23,860
因為他這個是跑 類似for each

734
00:45:23,860 --> 00:45:26,840
的一個迭代啦

735
00:45:26,840 --> 00:45:30,840
所以說你要有一個key unique key 讓他去辨認

736
00:45:31,540 --> 00:45:33,500
這是react特別要注意的地方

737
00:45:33,500 --> 00:45:35,980
那這裡面item.text就是

738
00:45:35,980 --> 00:45:39,400
把你todo的item的那個值印出來

739
00:45:39,400 --> 00:45:43,080
然後我們這邊是一個存在一個常數

740
00:45:43,080 --> 00:45:46,920
然後我們再export default 這是es6的寫法啦

741
00:45:46,920 --> 00:45:49,200
那你還記得就是

742
00:45:50,360 --> 00:45:54,440
這邊我們之前的範例

743
00:46:01,300 --> 00:46:06,780
module.exports 然後require 還記得嗎 這是commonJS的用法啦

744
00:46:06,780 --> 00:46:11,300
不過我們這邊事實上react

745
00:46:11,600 --> 00:46:16,720
是用es6原生的import跟export default

746
00:46:19,600 --> 00:46:24,300
那我們這樣就把這個component輸出出來了

747
00:46:24,300 --> 00:46:28,820
那我們在這個app.js這邊

748
00:46:29,200 --> 00:46:31,160
把import進來 然後把他放在這邊

749
00:46:32,020 --> 00:46:34,160
這個是一個react application

750
00:46:34,160 --> 00:46:39,380
大家可以去試玩看看 這樣的話你大概從生命週期

751
00:46:39,380 --> 00:46:42,020
component virtual dom

752
00:46:42,020 --> 00:46:46,400
大致上就大概瞭解react基礎的概念

753
00:46:46,400 --> 00:46:49,340
但事實上他是一個龐大的生態系

754
00:46:49,340 --> 00:46:52,160
如果你要充分發揮react的功能

755
00:46:52,160 --> 00:46:57,280
你可能需要搭配像redux這樣的state的管理工具去做管理

756
00:46:57,280 --> 00:47:00,100
或是說react router這樣的管理方式

757
00:47:00,100 --> 00:47:02,600
去管理你的url的routing

758
00:47:03,080 --> 00:47:06,540
還有很多很多的相關資源跟生態系

759
00:47:06,540 --> 00:47:11,540
歡迎大家可以去看相關的資源去探討

760
00:47:11,540 --> 00:47:16,400
那我自己在網路上我的github也有提供一本電子書

761
00:47:16,400 --> 00:47:20,400
叫react101的一本書

762
00:47:20,400 --> 00:47:24,800
那大家有興趣的話可以去閱讀 現在不定期會去更新

763
00:47:24,800 --> 00:47:29,520
未來的話因為有些學員

764
00:47:29,520 --> 00:47:32,280
因為我們這個單元時間有限

765
00:47:32,280 --> 00:47:36,500
不可能完整的講過 因為react生態系真的太龐大了

766
00:47:36,500 --> 00:47:40,320
如果你要完整發揮他的功效 你要學非常多的東西

767
00:47:40,320 --> 00:47:42,000
未來如果我們有時間的話

768
00:47:42,000 --> 00:47:45,520
我們也考慮開設相關react基礎到進階

769
00:47:45,920 --> 00:47:51,420
實務的一些課程 讓大家可以充分的體會reactjs開發

770
00:47:51,620 --> 00:47:52,840
那我們老話一句

771
00:47:54,060 --> 00:47:57,200
事實上javascript的一些框架琳瑯滿目

772
00:47:57,200 --> 00:48:01,860
前端開發技術也是日新月異每半年就會翻一倍

773
00:48:01,860 --> 00:48:04,180
那我們還是建議大家

774
00:48:04,180 --> 00:48:08,500
能夠把javascript和前端HTML和css基礎把他打好

775
00:48:08,500 --> 00:48:13,320
這樣你就不怕說技術再怎麼變 都是萬變不離中的

776
00:48:13,320 --> 00:48:16,980
先把氣宗練好那你的劍術自然就可成了

777
00:48:16,980 --> 00:48:20,340
那我們這個單元介紹了

778
00:48:20,340 --> 00:48:23,120
javascript主流的函式庫和框架

779
00:48:23,520 --> 00:48:26,700
讓大家體會一下reactjs的一個開發

780
00:48:26,700 --> 00:48:30,700
到這邊如果你依序照著我們的單元走下來

781
00:48:30,700 --> 00:48:32,760
我知道這真的很不容易

782
00:48:32,760 --> 00:48:36,760
辛苦大家了 希望大家有獲得非常多的收穫

783
00:48:36,760 --> 00:48:40,760
有任何問題歡迎大家一起交流討論

784
00:48:40,760 --> 00:48:44,760
一起教學相長 那也謝謝大家的支持

785
00:48:44,760 --> 00:48:48,760
那這個是我們最後一個單元 那我們謝謝大家

786
00:48:48,760 --> 00:48:52,760
那我們下次有新的課程再見囉

787
00:48:52,760 --> 00:48:56,760
掰掰

